<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
 
 <title>유스풀패러다임</title>
 <link href="http://usefulparadigm.com/" rel="self"/>
 <link href="http://usefulparadigm.com"/>
 <updated>2013-04-15T15:06:44+09:00</updated>
 <id>http://usefulparadigm.com</id>
 <author>
   <name>Useful Paradigm</name>
   <email>contact@usefulparadigm.com</email>
 </author>

 
 <entry>
   <title>워드프레스 웹사이트 제작 가이드</title>
   <link href="http://usefulparadigm.com/2012/08/13/wordpress-website-builidng-guide-2012"/>
   <updated>2012-08-13T00:00:00+09:00</updated>
   <id>http://usefulparadigm.com/2012/08/13/wordpress-website-builidng-guide-2012</id>
   <content type="html">&lt;!-- &lt;div class=&quot;alert-message block-message info&quot;&gt;
	&lt;strong&gt;워드프레스 웹사이트 무료로 제작지원해 드립니다!&lt;/strong&gt; 
	&lt;a href=&quot;/wordpress-hosting&quot;&gt;바로가기&lt;/a&gt;
&lt;/div&gt;	 --&gt;

&lt;p&gt;
워드프레스 기반의 웹사이트를 만들 때 필요한 프로세스와 방법들을 간단하게 STEP BY STEP으로 정리한 자료입니다.
&lt;/p&gt;

&lt;iframe src=&quot;http://www.slideshare.net/slideshow/embed_code/13953429&quot; width=&quot;427&quot; height=&quot;356&quot; frameborder=&quot;0&quot; marginwidth=&quot;0&quot; marginheight=&quot;0&quot; scrolling=&quot;no&quot; style=&quot;border:1px solid #CCC;border-width:1px 1px 0;margin-bottom:5px&quot; allowfullscreen&gt; &lt;/iframe&gt; &lt;div style=&quot;margin-bottom:5px&quot;&gt; &lt;strong&gt; &lt;a href=&quot;http://www.slideshare.net/usefulparadigm/ss-13953429&quot; title=&quot;워드프레스 웹사이트 제작 가이드&quot; target=&quot;_blank&quot;&gt;워드프레스 웹사이트 제작 가이드&lt;/a&gt; &lt;/strong&gt; from &lt;strong&gt;&lt;a href=&quot;http://www.slideshare.net/usefulparadigm&quot; target=&quot;_blank&quot;&gt;Sukjoon Kim&lt;/a&gt;&lt;/strong&gt; &lt;/div&gt;

</content>
 </entry>
 
 <entry>
   <title>워드프레스로 웹사이트 만들기</title>
   <link href="http://usefulparadigm.com/2012/03/17/creating-static-website-with-wordpress"/>
   <updated>2012-03-17T00:00:00+09:00</updated>
   <id>http://usefulparadigm.com/2012/03/17/creating-static-website-with-wordpress</id>
   <content type="html">&lt;!-- &lt;div class=&quot;alert-message block-message info&quot;&gt;
	&lt;strong&gt;워드프레스 웹사이트 무료로 제작지원해 드립니다!&lt;/strong&gt; 
	&lt;a href=&quot;/wordpress-hosting&quot;&gt;바로가기&lt;/a&gt;
&lt;/div&gt;	 --&gt;

&lt;p&gt;워드프레스의 인기가 높다. 그래서인지 요즘은 국내에서도 워드프레스를 이용하여 웹사이트를 구축하려는 시도들이 늘고  있다. 그런데 워드프레스는 원래 블로깅 도구로 출발한 탓에 웹사이트와 어울리는 디자인을 만들려면 조금 “손질”이 필요하다. 워드프레스를 블로그로 사용하는 방법은 이미 널리 알려져 있기 때문에 여기서는 워드프레스를 이용하여 웹사이트(흔히 기업이나 단체에서 “홈페이지”라 부르는)를 만드는 법을 소개하려 한다.&lt;/p&gt;

&lt;p&gt;우선 아래 웹사이트를 한번 보자. 이 사이트는 &lt;a href=&quot;http://wpsitebuilding.com/&quot;&gt;Building a Website with WordPress&lt;/a&gt;라는 사이트인데, 워드프레스로 만들었지만 보기에 통상적인 블로그 처럼 보이진 않는다. 워드프레스를 콘텐츠 관리 시스템(CMS) 내지는 그야말로 “정적인 웹사이트(static website)” 만드는 용도로 사용하고 있기 때문이다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://farm8.staticflickr.com/7052/6989080573_161ed78b7b_z.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;section&quot;&gt;웹사이트 모드로 변신!&lt;/h2&gt;

&lt;p&gt;이렇게 워드프레스를 웹사이트로 사용하기 위해서는 몇 가지 기본적인 설정을 해 주어야 한다. 워드프레스가 설치된 상태에서 관리자 페이지의 Settings &amp;gt; Reading 메뉴로 가면 다음과 같이 프론트 페이지 표시를 어떻게 할건지 하는 부분이 나온다. &lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://farm8.staticflickr.com/7199/6842957196_252f93d4f5.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;기본값은 최근 포스트들을 나열하는 방식으로 설정되어 있는데, 블로그라면 이 방식이 적합하다. 그렇지만 웹사이트로 만든다고 하면 정적 페이지(static page)로 설정해 주어야 한다. 옵션 값을 변경하고 프론트 페이지(Front Page) 선택하는 부분에서 Sample Page를 선택한 다음 저장하면 이제 워드프레스가 “블로그 모드”에서 “웹사이트 모드”로 변경된다(일부 테마는 테마 자체에서 이 기능을 활성화시키기도 한다). 참고로 여기 Sample Page는 워드프레스가 그야말로 샘플로 넣어 둔 테스트용 페이지로, 나중에 다른 것으로 바꿀 것이다.&lt;/p&gt;

&lt;h2 id=&quot;section-1&quot;&gt;테마 선택하기&lt;/h2&gt;

&lt;p&gt;워드프레스의 힘은 테마에서 나온다. 어떤 테마를 선택하냐에 따라 워드프레스는 각양각색의 모양새를 만들어 내기 때문이다. 따라서 웹사이트의 용도에 맞는(또는 고객의 요구사항에 부합하는) 적합한 테마를 선택하는 것이 중요하다. 테마는 &lt;a href=&quot;http://wordpress.org/extend/themes/&quot;&gt;WordPress Themes&lt;/a&gt;에서 무료 테마를 검색해도 좋고 &lt;a href=&quot;http://themeforest.net/&quot;&gt;themeforest&lt;/a&gt;나 &lt;a href=&quot;http://www.studiopress.com/&quot;&gt;StudioPress&lt;/a&gt; 같은 유료 테마 사이트를 이용해도 된다. 여기서는 워드프레스의 2010년 기본 테마인 &lt;a href=&quot;http://wordpress.org/extend/themes/twentyten&quot;&gt;Twenty Ten&lt;/a&gt;을 사용하기로 하겠다. &lt;/p&gt;

&lt;p&gt;테마를 활성(activate) 시키면 다음과 같은 프론트 페이지가 보일 것이다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://farm8.staticflickr.com/7048/6989080743_cf6547db87_z.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;vs-&quot;&gt;포스트 vs. 페이지&lt;/h2&gt;

&lt;p&gt;워드프레스에서 만들어 낼 수 있는 콘텐츠에는 여러 가지가 있지만 크게는 &lt;strong&gt;포스트(post)&lt;/strong&gt;와 &lt;strong&gt;페이지(page)&lt;/strong&gt;로 나눌 수 있다. 포스트는 ‘블로그 포스트’ 처럼 말 그대로 계속 새로운 내용으로 채워 나가는 콘텐츠를 만들 때 사용하는 반면, 페이지는 한번 만들어 두면 잘 변하지 않는 콘텐츠에 주로 사용한다. 웹사이트에서 흔히 볼 수 있는 회사소개 페이지나 컨택 페이지 같은 “페이지”들이 바로 워드프레스에서 말하는 그 “페이지”다. 블로그에서는 주로 “포스트”가 중심이 되지만, 정적인 콘텐츠들이 많은 웹사이트에서는 페이지의 비중이 높아진다. 페이지를 만들고 페이지를 커스터마이징 해야 할 일이 많아진다는 말이다.&lt;/p&gt;

&lt;p&gt;우선 앞서 임시로 연결해 둔 프론트 페이지 대신 새 페이지를 하나 만들어 보자. 페이지는 워드프레스 관리자로 가서 새 페이지 추가하기를 하면 추가할 수 있다. 여기서는 간단하게 페이지 제목을 “Welcome” 이라 두고 내용에 “환영합니다” 라고 한 줄 적었다. &lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://farm8.staticflickr.com/7210/6842956876_81a9be5aff_z.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;이제 관리자 대시보드의 Settings &amp;gt; Reading 에서 앞서와 같이 프론트 페이지를 방금 전 작성한 Welcome 페이지로 변경해 보자. 그러면 사이트의 메인 페이지가 변경된 것을 확인할 수 있을 것이다. 또한 이전에 있던 Sample Page가 메인 페이지의 메뉴 항목에 새로 추가되어 있는 것도 알 수 있을 것이다. 워드프레스 기반 웹사이트에서 페이지들은 기본적으로 이렇게 메뉴 항목에 추가된다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://farm8.staticflickr.com/7179/6842956928_534f6980f9_z.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;또한 워드프레스는 유연한 &lt;strong&gt;페이지 템플릿&lt;/strong&gt; 기능을 제공하기 때문에 원한다면 각각의 페이지마다 다른 페이지 템플릿을 만들어 적용할 수 있다는 점도 참고하면 좋을 것이다.&lt;/p&gt;

&lt;h2 id=&quot;section-2&quot;&gt;‘새소식’ 페이지 추가하기&lt;/h2&gt;

&lt;p&gt;아무리 페이지 중심의 정적인 웹사이트라고는 해도 포스트가 없다면 방문자들에게 별 재미가 없을 것이다. 매번 똑같은 페이지만 보일 바에야 굳이 워드프레스를 사용할 이유가 어디 있을까. 메인 메뉴에 “새소식” 메뉴를 하나 추가하고 이 곳에는 새로운 포스트들이 올라오게 해보자. “새소식”이라는 제목으로 새 페이지를 하나 만들자. 이 때 내용에는 아무 것도 쓰지 말고 그냥 빈 채로 둔다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://farm8.staticflickr.com/7205/6842957128_ff6c073316.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;이제 관리자 대시보드로 가서 Settings &amp;gt; Reading의 프론트 페이지 표시 부분에서 지금까지 비워두었던 두 번째 Posts Page 부분을 방금 만든 빈 “새소식” 페이지로 설정하자. 그런 다음 저장하고 다시 메인 페이지로 와서 보면 “새소식” 메뉴가 추가된 것을 알 수 있다. 이 메뉴를 클릭하면 콘텐츠들이 보일 것이다. 바로 우리가 작성한/그리고 앞으로 계속해서 작성해 올리게 될 새소식 “포스트” 들이다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://farm8.staticflickr.com/7201/6989081037_7fdb762048_z.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;section-3&quot;&gt;‘블로그’ 흔적 지우기&lt;/h2&gt;

&lt;p&gt;그런데 여기 한 가지 문제가 있다. 원래 워드프레스의 많은 부분이 블로그를 전제로 구성되어 있는 탓에, 워드프레스를 웹사이트 모드로 전환하면 여기저기 조금 어색한 부분들이 생기게 된다. 예를 들어 앞서 만든 메인 페이지에 댓글은 굳이 필요가 없다. 마찬가지로 컨택 페이지나 회사소개 페이지 같은 곳에서도 굳이 댓글을 달게 할 필요는 없을 것이다.  &lt;/p&gt;

&lt;p&gt;이 때는 테마를 수정해 주면 된다. 알다시피 워드프레스 테마는 여러 개의 테마 파일들로 구성되는데, 그 중 페이지 처리를 담당하는 테마 파일이 &lt;strong&gt;페이지 템플릿&lt;/strong&gt;(page.php) 이다. 이 템플릿 파일을 열어 그 속에 있는 댓글 출력과 관련된 코드를 제거해 주면 이제 페이지에서 댓글이 사라진다. 이 때 테마를 수정하는 방법으로는 테마 자체를 직접 수정해도 되지만, &lt;a href=&quot;http://usefulparadigm.com/2012/03/09/customizing-wordpress-theme-using-child-theme/&quot;&gt;자식테마를 사용하여 관리&lt;/a&gt;하는 것도 좋은 방법이다. 참고로, 지금 사용하고 있는 TwentyTen 테마의 경우 loop-page.php 파일을 열어 그 속에서 comments_template() 함수 호출 부분을 제거해 주면 된다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://farm8.staticflickr.com/7055/6989102261_f3787957d3_z.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;이 밖에도 처리해야 할 일들이 많이 있다. 예를 들면, 워드프레스의 기본 기능인 카테고리(category)나 태그(tag) 기능도 조금 더 웹사이트에 맞춰 변경해 주어야 하고, 페이지의 URL 들도 웹사이트에 맞게 조정해 주는 것이 좋다. 관리자용 대시보드의 경우도 불필요한 것들은 제거해 주어서 글을 작성하는 사람들이 조금 더 편하게 입력할 수 있게 해 주는 것이 좋고, 필요한 위젯이나 플러그인들도 설치해 주어야 한다. 참고자료에 몇 가지 도움이 되는 플러그인들을 소개하였으니 참고하면 좋을 것이다.&lt;/p&gt;

&lt;h2 id=&quot;section-4&quot;&gt;다른 방법들&lt;/h2&gt;

&lt;p&gt;지금까지는 워드프레스의 페이지 기능을 사용하여 정적인 웹사이트를 만드는 법을 알아 보았다. 그렇지만 워드프레스에서 웹사이트를 만들 때 꼭 이 방법만을 사용해야 하는 건 아니다. 앞서는 워드프레스에서 기본으로 제공하는 프론트페이지 설정 기능을 이용하였지만, 이 밖에 index.php 템플릿 파일을 직접 수정(권장하진 않는다)하거나 홈페이지용 템플릿인 home.php 파일을 추가하는 방식으로도 가능하다. &lt;/p&gt;

&lt;p&gt;또한 경우에 따라서는 기존 블로그 스타일을 유지하면서도 얼마든지 웹사이트 “스럽게” 보이는  사이트를 만들 수도 있다. 그 대표적인 방법이 매거진(magazine) 스타일의 테마와 같은, 적합한 용도의 테마를 사용하는 것이다. 아래는 상용 워드프레스 테마 중 하나인 &lt;a href=&quot;http://www.pagelines.com/showcase/genres/magazine/&quot;&gt;PageLines&lt;/a&gt;의 데모 화면들인데, 보다시피 블로그라기 보다는 훨씬 더 웹사이트에 가까워 보인다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://farm8.staticflickr.com/7200/6989081345_b3d88c4b48_z.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;이상으로 워드프레스를 웹사이트 용도도 사용하는 방법을 간단하게 소개했다. 지금까지 살펴 본 것만으로도 워드프레스가 얼마나 자유롭게 변형이 가능한 강력한 도구인지 가늠이 되었을 것이다. 그렇지만 이게 전부가 아니다. 차라리 맛보기 정도라고 불러야 맞을 것이다. 이 밖에도 워드프레스를 용도에 맞게 변경해서 사용할 수 있는 방법들은 헤아릴 수 없을 정도로 많다. 한마디로 “Sky is the limit” 이다.&lt;/p&gt;

&lt;h2 id=&quot;section-5&quot;&gt;참고자료&lt;/h2&gt;

&lt;h3 id=&quot;section-6&quot;&gt;참고문서&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://wpsitebuilding.com/how-to-build-a-website-with-wordpress&quot;&gt;How to Build a Website with WordPress&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://codex.wordpress.org/Creating_a_Static_Front_Page&quot;&gt;Creating a Static Front Page&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://digwp.com/2012/01/wordpress-cms-plugins/&quot;&gt;WordPress CMS Plugins&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;section-7&quot;&gt;웹사이트 만들 때 사용하기 좋은 테마들&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.studiopress.com/themes/genesis&quot;&gt;Genesis Framework&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.pagelines.com/&quot;&gt;PageLines&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://wordpress.org/extend/themes/thematic&quot;&gt;Thematic&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;기타 각종 유/무료 테마들은 구글 등 검색엔진에서 “&lt;a href=&quot;https://www.google.co.kr/search?q=wordpress+magazine+theme&quot;&gt;wordpress magazine theme&lt;/a&gt;“이나 “&lt;a href=&quot;https://www.google.co.kr/search?q=wordpress+magazine+theme&quot;&gt;wordpress website theme&lt;/a&gt;” 등의 검색어로 검색하면 쉽게 찾을 수 있다 &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;section-8&quot;&gt;웹사이트에서 사용하면 좋을 유용한 플러그인들&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://wordpress.org/extend/plugins/wp-cms-post-control/&quot;&gt;WP-CMS Post Control&lt;/a&gt; 관리자 페이지를 CMS 용도에 맞게 수정&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://wordpress.org/extend/plugins/my-page-order/&quot;&gt;My Page Order&lt;/a&gt; 드래그드롭 방식으로 페이지 정렬&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.webspaceworks.com/resources/wordpress/30/&quot;&gt;Fold Page List&lt;/a&gt; 중첩 페이지 목록 표시&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://wordpress.org/extend/plugins/page-links-to/&quot;&gt;Page Links To&lt;/a&gt; 워드프레스 페이지에서 외부 URL 링크&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://wordpress.org/extend/plugins/pagemash/&quot;&gt;PageMash&lt;/a&gt; 드래그드롭으로 페이지 구조 관리&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://wordpress.org/extend/plugins/fresh-page/&quot;&gt;Flutter&lt;/a&gt; 커스텀 페이지 패널 작성&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://podscms.org/&quot;&gt;Pods CMS&lt;/a&gt; 범용 워드프레스 CMS 확장&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://wordpress.org/extend/plugins/rich-text-widget/&quot;&gt;Rich Text Widget&lt;/a&gt; 위젯에 리치 텍스트 추가&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://wordpress.org/extend/plugins/exec-php/&quot;&gt;Exec-PHP&lt;/a&gt; 페이지나 포스트 속에서 php 코드 사용&lt;/li&gt;
&lt;/ul&gt;
</content>
 </entry>
 
 <entry>
   <title>자식테마를 이용한 워드프레스 테마 관리하기</title>
   <link href="http://usefulparadigm.com/2012/03/09/customizing-wordpress-theme-using-child-theme"/>
   <updated>2012-03-09T00:00:00+09:00</updated>
   <id>http://usefulparadigm.com/2012/03/09/customizing-wordpress-theme-using-child-theme</id>
   <content type="html">&lt;p&gt;워드프레스를 사용하다보면 테마(theme)를 수정해야 할 일들이 종종 생기게 된다. 이 때 워드프레스 테마를 수정할 수 있는 방법은 크게 두 가지인데, 하나는 직접 테마 자체를 수정하는 것이고 나머지 하나는 바로 지금 소개할 &lt;strong&gt;자식테마(child theme)&lt;/strong&gt;를 만들어 사용하는 것이다. 자식 테마는 다른 테마의 기능을 상속(inherit)받아 새로운 테마를 만들고 그 위에 필요한 기능만 덧붙이는 것으로, 이 때 상속받는 대상을 &lt;strong&gt;부모테마(parent theme)&lt;/strong&gt;라 부른다. 마치 실세계에서 자식이 부모의 유전자를 상속받는 것이나 객체지향 프로그래밍에서 자식객체가 부모객체를 상속받는 것과 유사한 개념으로 워드프레스 2.7부터 새로 도입되었다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://farm8.staticflickr.com/7049/6966237459_ddd63fff69.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;자식테마를 만들어 사용하는 것은 테마의 호환성 관리 차원에서도 좋은 선택이다. 예를 들어, 내가 어떤 테마를 수정해서 쓰고 있는데, 그 테마가 어느날 업데이트되었다고 하자. 그러면 내가 지금껏 직접 테마에 가했던 변경사항들을 고스란히 다시 새 테마에 반영해 주어야 하는 문제가 생긴다. &lt;strike&gt;혹은 지금 쓰고 있던 테마가 구닥다리라서 새로운 테마로 갈아타려고 할 때에에도 기존에 테마에 가했던 이런저런 여러 가지 변경들 때문에 발목이 잡히기 일쑤다.&lt;/strike&gt; 자식테마를 사용하면 이런 “과거의 미련”으로부터 자유로울 수 있다.&lt;/p&gt;

&lt;h2 id=&quot;section&quot;&gt;부모테마 고르기&lt;/h2&gt;

&lt;p&gt;그럼 자식테마를 한번 만들어보기로 하자. 어렵지 않다. 우선 부모가 될 테마를 하나 선택해야 한다. 어떤 테마든 부모테마가 될 수 있지만, 가급적 워드프레스의 새로운 버전의 기능들이 잘 반영된 테마를 부모테마로 삼는 게 좋다. &lt;/p&gt;

&lt;p&gt;그런 테마에는 어떤 것들이 있을까? 몇 가지만 추려보면 다음과 같다. 그 밖에 더 많은 테마들은 구글에서  ‘wordpress theme framework’로 검색해 보면 쉽게 찾을 수 있을 것이다. (테마 프레임워크는 자식테마와는 조금 다른 개념이지만, 테마 프레임워크를 부모테마로 사용해도 나쁠 건 없다)&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://theme.wordpress.com/themes/twentyeleven/&quot;&gt;Twenty Eleven&lt;/a&gt; 워드프레스 3.0의 디폴트 테마&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://wordpress.org/extend/themes/notes-blog-core-theme&quot;&gt;Notes Blog Core&lt;/a&gt; Smashing WordPress로 유명한 Notes Blog에서 사용하는 테마&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://wordpress.org/extend/themes/thematic&quot;&gt;Thematic&lt;/a&gt; 인기있는 테마 프레임워크&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;여기서는 &lt;a href=&quot;http://wordpress.org/extend/themes/notes-blog-core-theme&quot;&gt;Notes Blog Core&lt;/a&gt; 테마를 사용하기로 한다. 자식테마를 만들기 위해서는 먼저 부모테마가 설치되어 있어야 하니 설치가 안되어 있다면 설치하고 다음으로 넘어가자.&lt;/p&gt;

&lt;h2 id=&quot;section-1&quot;&gt;자식테마 만들기&lt;/h2&gt;

&lt;p&gt;자식테마를 만드는 일은 간단하다. 워드프레스의 테마 디렉터리(wp-content/themes/) 아래에 적당한 이름으로 테마 폴더를 하나 생성해 주고 그 속에 style.css 파일만 하나 만들어 주면 끝이다. 그리고 style.css 맨 위에 다음과 같은 주석으로 이 테마가 Notes Blog Core 테마를 부모테마로 하는 자식테마임을 선언해 주면 된다. Template 란에 부모테마의 디렉터리명을 적어주는 것이 중요하다.&lt;/p&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;
/*
Theme Name: 자식 테마 이름
Theme URI: http://your-theme-homepage.com
Description: 뭐든 테마를 기술할 수 있는 말을 적으세요!
Author: 누구?
Author URI: http://your-website.com
Template: notes-blog-core-theme
Version: A version number
.
기타 일반적인 정보들. 예를 들면, 라이선스 정보라든가 플러그인 요구사항, 호환성 정보, 기타 사용자들과 나누고픈 내용들
.
*/
&lt;/pre&gt;

&lt;p&gt;이제 워드프레스 대시보드로 가서 방금 전 만든 테마로 변경하자. 처음 만들어진 자식테마는 물론 아직 부모테마와 똑같은 모양이 아닐 것이다. 부모테마로부터 모든 기능을 물러 받았지만, 외모(look &amp;amp; feel) 부분은 아직 물러받지 못했기 때문이다. &lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://farm8.staticflickr.com/7193/6966237287_e2e74c6905_z.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;section-2&quot;&gt;테마 변경하기&lt;/h2&gt;

&lt;p&gt;그럼 이제 style.css에 몇 가지 변경을 가해 보자. 우선 부모테마의 스타일부터 상속받자. style.css 에 다음 한 줄을 추가하고 나면 이제 부모테마와 똑같아 졌을 것이다.&lt;/p&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;
@import url(&quot;../notes-blog-core-theme/style.css&quot;);
&lt;/pre&gt;

&lt;p&gt;부모에 의존하는 것은 여기까지가 끝이다. 이제부터는 자신만의 길을 가야한다. 지금부터 style.css에 추가하는 내용은 부모테마와 달라지는 부분이다. 예를 들어, 부모테마의 글꼴을 나눔고딕체로 변경하고 싶다면 다음과 같은 식으로 자식테마에서 변경해 주면 된다.&lt;/p&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;
body {
	font-family: NamumGothic;
}
&lt;/pre&gt;

&lt;p&gt;만약 style.css 외에 테마의 다른 부분을 변경하고 싶다면? 마찬가지다. 부모테마에 있는 테마 파일과 동일한 이름의 테마 파일을 자식테마 디렉터리에 만들어 두고 그 속에서 필요한 변경을 해 주면 된다. 예를 들어, 페이지 테마에 변경을 가하고 싶으면, 부모테마 디렉터리에 있는 page.php 파일을 자식테마 디렉터리에 복사하고 그 복사한 page.php 파일을 변경하면 된다. 언제나 자식테마가 우선이다. 워드프레스는 자식테마인 경우 자식테마의 디렉터리를 먼저 참조하고 없을 경우만 부모테마를 찾는다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://farm8.staticflickr.com/7046/6966237383_534c87d570_z.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;section-3&quot;&gt;고려해야 할 점들&lt;/h2&gt;

&lt;p&gt;그렇지만 자식테마가 만병통치약은 아니다. 과다하게 자식테마를 사용하는 것은 결국 부모테마를 직접 고치는 것과 별반 다른 게 없다. 게다가 자식테마를 사용할 경우 워드프레스가 부모테마와 자식테마 간을 상호참조해야 하기 때문에 복잡도가 조금 더 높아지고 약간의 성능감소도 따르는 것이 사실이다. 그렇지만 부모테마를 그대로 쓰되 스타일링 부분만 변경하려 하거나 아니면 funtion.php를 수정하여 약간의 기능변경을 하려 하는 경우라면 자식테마는 좋은 솔루션이 될 수 있을 것이다.&lt;/p&gt;

&lt;p&gt;자식테마와 관련해 더 자세한 내용은 아래 참고자료를 참고하자.&lt;/p&gt;

&lt;h2 id=&quot;section-4&quot;&gt;참고자료&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://codex.wordpress.org/Child_Themes&quot;&gt;Codex Child Themes&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://themeshaper.com/2009/04/17/wordpress-child-theme-basics/&quot;&gt;WordPress Child Theme Basics&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.webdesignerdepot.com/2011/12/creating-your-first-wordpress-child-theme/&quot;&gt;Creating your first WordPress child theme&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://sixrevisions.com/wordpress/wordpress-theme-frameworks-options-you-should-consider/&quot;&gt;WordPress Theme Frameworks: Options You Should Consider&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.webdesignerdepot.com/2011/10/a-comparison-of-leading-wordpress-theme-frameworks/&quot;&gt;A comparison of leading WordPress theme frameworks&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

</content>
 </entry>
 
 <entry>
   <title>git-scribe로 전자책 만들기</title>
   <link href="http://usefulparadigm.com/2012/02/17/creating-ebook-with-git-scribe"/>
   <updated>2012-02-17T00:00:00+09:00</updated>
   <id>http://usefulparadigm.com/2012/02/17/creating-ebook-with-git-scribe</id>
   <content type="html">&lt;p&gt;&lt;img src=&quot;http://farm8.staticflickr.com/7070/6890389633_851a7a1384_m.jpg&quot; class=&quot;right&quot; /&gt;&lt;/p&gt;

&lt;p&gt;요즘 전자책 시장이 다시 활기를 띠고 있는 듯한 느낌이다. 아마존이나 애플, 구글 등 세계적인 IT기업들이 전자책 시장에 뛰어들어 속속 멋진 제품들을 쏟아내고 있고, 국내에서도 여러 업체들이 전자책 단말기부터 전자책 유통 플랫폼, 전자책 콘텐츠에 이르는 여러 가지 아이디어와 상품들을 출시하고 있다.&lt;/p&gt;

&lt;p&gt;게다가 아이패드나 갤럭시탭 등 스마트 기기의 보급과 정부의 디지털 교과서 정책 등이 맞물려 앞으로도 계속해서 전자책 시장은 그 규모가 커지리라는 사실을 누구나 예상할 수 있다. 특히 최근에는 애플이 iBooks Author라는 전자책 저작 도구를 만들어 무료로 배포함으로써 이제 명실공히 “누구든 책을 출간할 수 있는 시대”의 서막을 열었다. 물론 아직도 가야할 길은 멀지만 그렇다고 무작정 기다릴 수만은 없는 일.&lt;/p&gt;

&lt;p&gt;이 글에서는 &lt;a href=&quot;https://github.com/schacon/git-scribe&quot;&gt;git-scribe&lt;/a&gt;라는 간단한 오픈소스 전자책 저작도구을 사용하여 전자책을 직접 한번 만들어 보기로 하겠다.&lt;/p&gt;

&lt;h2 id=&quot;section&quot;&gt;설치하기&lt;/h2&gt;

&lt;p&gt;git-scribe는 루비 젬이다. 따라서 당연히 &lt;a href=&quot;http://www.ruby-lang.org/ko/&quot;&gt;루비&lt;/a&gt;가 설치되어 있어야 하며, 또한 &lt;a href=&quot;http://git-scm.com/&quot;&gt;git&lt;/a&gt;을 데이터 저장소로 사용하는 관계로 git도 설치되어 있어야한다. 이 두 프로그램은 많은 사용자들의 컴퓨터에 이미 설치되어 있는 경우가 많고 또 설치 방법도 비교적 간단하기 때문에 여기서 따로 설명은 생략한다. 이 밖에도 몇 가지 추가적인 라이브러리를 설치해야 하는데, 필요한 라이브러리들은 각각 다음과 같다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;asciidoc : 소스문서 작성을 위해 필요&lt;/li&gt;
  &lt;li&gt;xsltproc : 소스문서의 html 변환을 위해 필요&lt;/li&gt;
  &lt;li&gt;a2x : epub 파일 생성을 위해 필요&lt;/li&gt;
  &lt;li&gt;source-highlight : 소스코드 구문 강조(syntax highlight)를 위해 필요&lt;/li&gt;
  &lt;li&gt;fop : PDF 파일 생성을 위해 필요&lt;/li&gt;
  &lt;li&gt;kindlegen : mobi  파일 생성을 위해 필요&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;우선 터미널에서 아래 명령으로 이들 라이브러리가 설치되어 있는지 확인하자.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ git scribe check asciidoc - ok xsltproc - ok a2x - ok highlighting - ok fop - ok
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;설치되어 있지 않다면 설치해야 한다. 맥을 사용하고 있고 &lt;a href=&quot;http://mxcl.github.com/homebrew/&quot;&gt;Homebrew&lt;/a&gt;가 설치되어 있다면 다음과 같이 간단한 명령만으로 쉽게 설치할 수 있을 것이다.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ brew install asciidoc source-highlight fop
$ brew install https://raw.github.com/adamv/homebrew-alt/master/non-free/kindlegen.rb
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&quot;section-1&quot;&gt;책 만들기&lt;/h2&gt;

&lt;p&gt;자, 이제 준비가 끝났으면 책을 한번 만들어 보기로 하자. 터미널을 열어 책을 쓸 디렉터리를 하나 만들자. 디렉터리명이 mybook이라면 다음과 같이 명령을 주면 된다.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ git scribe init mybook
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;이제 mybook이라는 디렉터리가 생성되는데, 이 디렉터리에 들어가 보면 필요한 몇 개의 파일과 디렉터리들이 이미 만들어져 있음을 확인할 수 있을 것이다. 이것으로 끝이다. 이것으로 책을 쓸 모든 준비는 끝이 났다. 이제 책 “쓰는” 일만 남았다. &lt;/p&gt;

&lt;p&gt;그렇다면 책은 어디에다 써야 할까? 디렉터리 구조를 들여다 보면 이미 book 이라는 이름의 디렉터리가 만들어져 있는 것을 확인할 수 있을 것이다. 이 디렉터리가 책을 담을 곳이다. 이 디렉터리 속에 보면  book.asc 라는 파일이 있는데 이 파일이 모든 책의 시작점이 된다. 마치 웹사이트에서 index.html 파일이 시작점이 되는 것과 마찬가지다. &lt;/p&gt;

&lt;p&gt;파일을 열어보면 샘플로 작성된 문서가 있을테니 그 문서를 참조하여 글을 작성하면 될 것이다. 파일명에서 알 수 있듯 git-scribe는 AsciiDoc 이라는 문서 포맷을 사용한다. AsciiDoc 사용법은 &lt;a href=&quot;http://www.methods.co.nz/asciidoc/&quot;&gt;AsciiDoc 홈페이지&lt;/a&gt;나 또는 &lt;a href=&quot;http://powerman.name/doc/asciidoc&quot;&gt;AsciiDoc cheatsheet&lt;/a&gt;을 참고하면 된다.&lt;/p&gt;

&lt;h2 id=&quot;section-2&quot;&gt;전자책 파일로 변환하기&lt;/h2&gt;

&lt;p&gt;책을 다 만들었다면 이제 전자책으로 변환하는 일만 남았다. 역시 간단하다. 터미널에서 다음 명령만 주면 된다. (중괄호 속의 단어 중 필요한 것 하나만 선택하면 된다. 예를 들어, epub 포맷으로 만들고 싶다면 &lt;code&gt;git scribe gen epub&lt;/code&gt; 와 같은 식으로 주면 된다는 말이다)&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ git scribe gen [site|html|pdf|epub|mobi|all]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;이제 output 디렉터리를 열어보면 요청한 전자책 포맷대로 파일이 생성되어 있음을 확인할 수 있을 것이다.&lt;/p&gt;

&lt;p&gt;전자책 출간을 축하드린다!&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Facebook Page에 iFrame Tab 추가하기</title>
   <link href="http://usefulparadigm.com/2011/11/28/making-facebook-iframe-tabs-for-pages"/>
   <updated>2011-11-28T00:00:00+09:00</updated>
   <id>http://usefulparadigm.com/2011/11/28/making-facebook-iframe-tabs-for-pages</id>
   <content type="html">&lt;p&gt;&lt;img src=&quot;http://farm8.staticflickr.com/7169/6417234831_80e84d748c_m.jpg&quot; class=&quot;right&quot; /&gt;&lt;/p&gt;

&lt;p&gt;페이스북 사용자가 증가함에 따라 최근 기업들도 앞다퉈 페이스북Facebook 플랫폼을 기업의 마케팅 기반에 추가하는 사례가 늘어가고 있다.
페이스북 마케팅의 시작은 통상적으로 페이스북에 페이지를 만드는 것에서부터 출발하는 경우가 많은데, 페이스북 페이지를 운영하다 보면
페이스북에서 기본으로 제공하는 페이지 만으로는 필요한 니즈를 충족하지 못해 새로운 탭을 만들어야 하는 경우가 생기게 된다. 
이 때 가장 간단한 방법은 시중에 나와 있는 페이스북 탭 애플리케이션들(유/무료)을 이용하는 것이지만, 경우에 따라서는 이런 솔루션들만으로
니즈를 충족시키지 못하는 경우도 있고, 또 간단한 페이지 탭인 경우는 굳이 솔루션의 도움을 받지 않아도 되는 경우도 생긴다.&lt;/p&gt;

&lt;p&gt;여기서는 별도 솔루션을 사용하지 않고, 직접 만드는 방법을 소개한다. 
기존 솔루션의 종류나 사용법에 대해서는 페이스북에서 “static html” 또는 “static iframe”으로 검색하면 자세한 목록을 얻을 수 있다.&lt;/p&gt;

&lt;h2 id=&quot;section&quot;&gt;1. 페이스북 앱 등록하기&lt;/h2&gt;

&lt;p&gt;페이스북 Page Tab도 일종의 페이스북 앱(App) 이기 때문에 아주 간단한 탭이라도 &lt;a href=&quot;https://developers.facebook.com/apps&quot;&gt;Facebook 개발자 사이트&lt;/a&gt;에 접속, 앱을 등록하는 절차를 거쳐야 한다. 만들려고 하는 것이 페이지 탭이기 때문에 &lt;strong&gt;페이지 탭&lt;/strong&gt; 메뉴를
활성화시킨 다음, 탭과 연결할 사이트(통상적으로는 이벤트 페이지가 될 것이다)의 페이지 URL을 등록해 주면 된다. 이 때 유의해야 할 점은,
페이스북이 &lt;a href=&quot;https://developers.facebook.com/docs/oauth2-https-migration/&quot;&gt;2011년 10월부터 모든 캔버스 앱(및 페이지 탭)에 대해 HTTPS를 적용&lt;/a&gt;함에 따라 반드시 https:// 로 시작하는 보안 URL을 등록해 줘야 한다는 점이다. &lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://farm8.staticflickr.com/7010/6417314635_181d61878b_z.jpg&quot; alt=&quot;페이스북 앱 등록&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;section-1&quot;&gt;2. 콘텐츠 페이지 만들기&lt;/h2&gt;

&lt;p&gt;앱 등록을 하였으면 실제 페이지 탭 속에 들어갈 콘텐츠 페이지를 만들어야 한다. 콘텐츠 페이지는 사용자가 페이지에서 탭을 클릭할 경우 보여지는 페이지이며, 실제로는 페이스북 페이지 내에서 iframe으로 렌더링(rendering)되기 때문에, 어떠한 HTML페이지든 상관없이 가능하다.
다만 통상적으로 이 페이지에는 페이스북의 각종 플러그인들을 얹혀 사용하는 경우가 많기 때문에 간단한 템플릿을 하나 작성해 두고 재사용하면
편리하다. 다음은 페이스북 탭 페이지용으로 사용할 수 있는 간단한 HTML 파일 템플릿이다.&lt;/p&gt;

&lt;script src=&quot;https://gist.github.com/1399667.js?file=fan_event.html&quot;&gt;&lt;/script&gt;

&lt;p&gt;이 템플릿 파일을 앞서 앱 등록 시에 설정했던 페이지 탭 URL과 맞추어 주면 콘텐츠 페이지가 완성된다. 
이 때 APP_ID를 앞서 등록한 페이스북 APP ID로 채우는 것을 잊지 말자.
만약 담벼락에 올리기나 댓글 처럼 추가 플러그인이 필요한 경우는 &lt;a href=&quot;https://developers.facebook.com/docs/plugins/&quot;&gt;페이스북 플러그인 페이지&lt;/a&gt;에서 코드를 가져다 붙이면 된다. &lt;/p&gt;

&lt;h2 id=&quot;section-2&quot;&gt;3. 페이지에 탭 추가하기&lt;/h2&gt;

&lt;p&gt;마지막은 페이스북 페이지에 방금 제작한 탭을 추가하는 것이다. 앱 등록 페이지 좌측 하단에 있는 관련 링크 중에서 &lt;strong&gt;앱 페이지 보기&lt;/strong&gt;를 클릭하면 방금 생성한 앱의 페이지가 표시되는데, 이 앱 페이지의 좌측에 있는 &lt;strong&gt;내 페이지에 추가&lt;/strong&gt; 메뉴를 클릭하여 추가하고 싶은 페이지를 선택하면 해당 페이지에 방금 생성한 탭이 추가된 것을 확인할 수 있을 것이다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://farm8.staticflickr.com/7023/6417418693_b9dbf419b5_z.jpg&quot; alt=&quot;내 페이지에 추가&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Updated(2011/12/13)&lt;/strong&gt; 최근 페이스북이 앱 페이지(앱 프로파일 페이지)를 &lt;a href=&quot;https://developers.facebook.com/blog/post/611/&quot;&gt;없애기로 결정&lt;/a&gt;함에 따라 이제 신규로 생성하는 앱은 
위와 같은 방식으로 페이지에 앱을 추가할 수 없게 되었다. 대신 페이스북에서는 다음과 같은 스크립트를 앱의 소스코드에 추가함으로써 “내 페이지에 추가하기” 기능을 쉽게 구현할 수 있도록 해 놓고 있다.&lt;/p&gt;

&lt;script src=&quot;https://gist.github.com/1470762.js?file=gistfile1.txt&quot;&gt;&lt;/script&gt;

&lt;p&gt;물론 직접 링크를 호출하는 방식으로도 가능하다. 브라우저의 URL 창에 다음 주소를 입력하면 예전과 같은 페이지에 추가하기 대화창이 나온다.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;http://www.facebook.com/dialog/pagetab?app_id=YOUR_APP_ID&amp;amp;next=http://facebook.com
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;문서화되지 않은 방법&lt;/strong&gt;: 또는 다음 URL을 호출하여도 탭 추가가 가능하다.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;https://www.facebook.com/add.php?api_key=YOUR_APP_ID&amp;amp;pages
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;Updated(2012/03/16)&lt;/strong&gt; 최근 페이스북이 앱페이지(앱 커뮤니티 페이지)의 관리자 메뉴 속에 &lt;em&gt;앱을 페이지에 추가하기&lt;/em&gt; 메뉴를 추가했다. 앱페이지를 만들었다면 이 메뉴 기능을 이용해도 된다. &lt;a href=&quot;https://www.facebook.com/photo.php?fbid=407581229256851&amp;amp;set=a.365001673514807.110147.352249658123342&amp;amp;type=1&quot;&gt;자세한 내용&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;section-3&quot;&gt;참고자료&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://developers.facebook.com/blog/post/462/&quot;&gt;Introducing iframe Tabs for Pages&lt;/a&gt; (Facebook 개발자 블로그) &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://developers.facebook.com/docs/appsonfacebook/pagetabs/&quot;&gt;Page Tab Tutorial&lt;/a&gt; (Facebook 개발자 문서)&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://developers.facebook.com/docs/reference/dialogs/add_to_page/&quot;&gt;Add Page Tab Dialog&lt;/a&gt; (facebook 개발자 문서)&lt;/li&gt;
&lt;/ul&gt;
</content>
 </entry>
 
 <entry>
   <title>클라우드 기반에 Facebook App 호스팅하기</title>
   <link href="http://usefulparadigm.com/2011/11/23/hosting-the-facebook-apps-on-cloud"/>
   <updated>2011-11-23T00:00:00+09:00</updated>
   <id>http://usefulparadigm.com/2011/11/23/hosting-the-facebook-apps-on-cloud</id>
   <content type="html">&lt;p&gt;최근 페이스북이 클라우드 플랫폼인 &lt;a href=&quot;https://developers.facebook.com/blog/post/558/&quot;&gt;Heroku를 자사의 애플리케이션 배포 플랫폼에 추가&lt;/a&gt;함에 따라 이제 페이스북 개발자들은 별도의 호스팅 절차 없이도 간단하게 페이스북 앱(
&lt;a href=&quot;https://developers.facebook.com/docs/guides/web/&quot;&gt;웹사이트&lt;/a&gt; 방식이든 
&lt;a href=&quot;https://developers.facebook.com/docs/guides/canvas/&quot;&gt;캔버스앱&lt;/a&gt;이든)을 개발할 수 있게 되었다.&lt;/p&gt;

&lt;p&gt;물론 굳이 이런 밀겹합(deep integration) 방식을 사용하지 않더라도 페이스북 앱을 장착할 수 있는 다양한 클라우드 기반들이 이미
많이 존재한다. 클라우드 기반에서 페이스북 앱을 호스팅할 수 있는 몇 가지 방안을 소개한다.&lt;/p&gt;

&lt;h3 id=&quot;heroku-&quot;&gt;Heroku에 호스팅하기&lt;/h3&gt;

&lt;p&gt;가장 간단한 방법은 페이스북 앱 등록 페이지에서 제공하는 클라우드 서비스를 이용하는 방법이다. 이 때 클라우드 서비스를 추가하면 실제로는 클라우드 기반 앱 플랫폼인 Heroku와 연동된다. Heroku는 이전에는 루비 기반 앱만 호스팅할 수 있었지만 최근 Java, PHP, Node.js 등 다양한 개발 언어를 지원하는 ‘&lt;a href=&quot;http://blog.heroku.com/archives/2011/8/3/polyglot_platform/&quot;&gt;Polyglot Platform&lt;/a&gt;‘으로 전환하였다.&lt;/p&gt;

&lt;p&gt;Facebook 앱 등록 페이지에서 호스팅 서비스 추가를 클릭하면 다음과 같이 페이스북 앱 개발 시에 사용할 언어를 선택하는 옵션이 나오고 이 때 적절한 언어를 선택하고 나서 클릭하면 바로 디폴트 앱이 생성되는 것을 확인할 수 있다. &lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://farm7.staticflickr.com/6230/6386632221_cb4f3140e5.jpg&quot; alt=&quot;클라우드 서비스 추가하기&quot; /&gt;&lt;/p&gt;

&lt;p&gt;다음과 같이 디폴트 앱이 생성되어 브라우저에 보여진다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://farm7.staticflickr.com/6043/6386632457_e6722f4eb3_z.jpg&quot; alt=&quot;페이스북 디폴트 앱&quot; /&gt;&lt;/p&gt;

&lt;p&gt;이제 다시 페이스북 앱 등록 페이지로 와서 보면 페이스북 앱과 연동된 클라우드 서비스의 Hosting URL이 등록된 것을 확인할 수 있을 것이다. 물론 이 URL은 Heroku로 접속하여 변경할 수 있고, 기존에 Heroku에서 제공하는 다양한 부가서비스들도 동일하게 이용할 수 있다. 참고로 페이스북 앱 등록 페이지를 통해 설치되는 Heroku의 디폴트 앱에 대한 소스코드는 아래 github에서 확인할 수 있다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;PHP &lt;a href=&quot;https://github.com/heroku/facebook-template-php&quot;&gt;https://github.com/heroku/facebook-template-php&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Node.js &lt;a href=&quot;https://github.com/heroku/facebook-template-nodejs&quot;&gt;https://github.com/heroku/facebook-template-nodejs&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Python &lt;a href=&quot;https://github.com/heroku/facebook-template-python&quot;&gt;https://github.com/heroku/facebook-template-python&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Ruby &lt;a href=&quot;https://github.com/heroku/facebook-template-ruby&quot;&gt;https://github.com/heroku/facebook-template-ruby&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;aws-cloud-&quot;&gt;아마존 웹서비스 클라우드(AWS cloud)에 호스팅하기&lt;/h3&gt;

&lt;p&gt;아마존 웹서비스 클라우드 환경에 Facebook 앱을 호스팅하는 방법은 여러 가지 있지만 가장 간단한 방법 중 하나는 아마존 웹서비스 중 하나인 &lt;a href=&quot;http://aws.amazon.com/cloudformation/&quot;&gt;AWS CloudFormation&lt;/a&gt; 서비스를 이용하는 것이다. &lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://awsmedia.s3.amazonaws.com/articles/FB-apps-on-AWS-9-2011/fig1.png&quot; alt=&quot;설치 단계&quot; /&gt;  &lt;/p&gt;

&lt;p&gt;다음과 같이 AWS CloudFormation 관리 콘솔에서 &lt;a href=&quot;http://s3.amazonaws.com/aws-facebook/SampleFacebookPHP.template&quot;&gt;Facebook 앱용 템플릿&lt;/a&gt;의 URL을 지정하면 바로 페이스북 앱을 생성할 수 있다. 이 때 Facebook AppId, Secret 정보와 AWS 계정 정보 등을 앱 실행에 필요한 정보들을 추가로 입력해 주어야 한다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://farm8.staticflickr.com/7158/6387710847_d00f26377f_z.jpg&quot; alt=&quot;AWS Facebook 앱 템플릿 등록&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://farm8.staticflickr.com/7033/6387710589_3d64302357.jpg&quot; alt=&quot;AWS 앱 등록 폼&quot; /&gt;&lt;/p&gt;

&lt;p&gt;EC2 스택이 새로 생성되고 Facebook PHP SDK 등 관련된 파일이 셋팅되는 동안 잠시 기다리면 다음과 같이 설치가 완료되고 CREATE_COMPLETE 메시지가 출력된다. 이때 생성되는 SiteURL 값을 페이스북 앱 등록 페이지에서 설정해 주면 AWS와 Facebook 간의 연동이 완료된다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://farm8.staticflickr.com/7144/6387729251_2bacf6544d_z.jpg&quot; alt=&quot;AWS 설치 완료&quot; /&gt;&lt;/p&gt;

&lt;p&gt;이 때 사용된 페이스북 앱의 소스코드는 다음 URL에서 확인할 수 있다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://aws-facebook.s3.amazonaws.com/aws-facebook-php-v1.tar.gz&quot;&gt;http://aws-facebook.s3.amazonaws.com/aws-facebook-php-v1.tar.gz&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;google-app-engine-&quot;&gt;Google App Engine에 호스팅하기&lt;/h3&gt;

&lt;p&gt;Facebook 캔버스 앱이라고 해서 구글 앱 엔진에 앱을 호스팅하는데 달라지는 점은 전혀 없다. 통상적인 Google App Engine(GAE) 사용 절차에 따라 앱을 개발하여 배포하고 페이스북 개발자 페이지에서 앱 URL을 등록해 주면 된다. 다만 GAE가 현재 Python, Java, Go 언어만을 지원하기 때문에 PHP로 된 앱은 배포할 수 없다. 페이스북 개발자 문서에서 GAE에 Python 기반 Facebook Canvas App을 만드는 &lt;a href=&quot;https://developers.facebook.com/docs/samples/canvas/&quot;&gt;튜토리얼&lt;/a&gt;이 소개되어 있으니 자료로 참조하면 좋을 것이다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://developers.facebook.com/attachment/canvas-sample-main-app.png&quot; alt=&quot;Sample Canvas App&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;section&quot;&gt;참고자료&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://blog.heroku.com/archives/2011/9/15/facebook/&quot;&gt;Facebook and Heroku&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://devcenter.heroku.com/articles/facebook&quot;&gt;Getting Started with Your Facebook App on Heroku&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://aws.amazon.com/articles/1044&quot;&gt;Hosting Facebook Applications on Amazon EC2&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://developers.facebook.com/docs/samples/canvas/&quot;&gt;Sample Canvas App on GAE&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

</content>
 </entry>
 
 <entry>
   <title>Play 프레임워크와 Heroku를 이용한 웹앱 개발</title>
   <link href="http://usefulparadigm.com/2011/11/17/web-development-with-play-and-heroku"/>
   <updated>2011-11-17T00:00:00+09:00</updated>
   <id>http://usefulparadigm.com/2011/11/17/web-development-with-play-and-heroku</id>
   <content type="html">&lt;p&gt;최근 Java 기반 웹 프레임워크 중 하나인 Play!가 주목받고 있다. Java야 이미 오래 전부터 수많은 웹서비스와 엔터프라이즈 환경에서 검증된 웹 개발 언어로 그리고 주력 플랫폼으로 사용되고 있었기 때문에 다른 어떤 웹 개발 환경 보다도 다양하고 광범위한 기술 기반을 보유하고 있다. 이미 웹 개발과 관련한 많은 기술 표준들이 나와 있고 많은 훌륭한 웹 개발 프레임워크들이 존재하기 때문에 새로 무언가 필요할까 싶은 생각도 들지만, Play!를 접하고 나면 조금 다른 느낌이 든다. “아~ 자바로도 이런 게 가능하구나. 역시 언어 문제는 아니었군.” 하는 생각.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://farm7.static.flickr.com/6237/6353518869_7bda34fdca.jpg&quot; alt=&quot;Play framework&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Play!의 특징을 몇 가지만 들어 보면 다음과 같다.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;MVC 아키텍처를 채택&lt;/li&gt;
  &lt;li&gt;서블릿 컨테이너를 사용하지 않고 자체 서버로 직접 배포하는 방식을 취함 (container-less)&lt;/li&gt;
  &lt;li&gt;JBoss의 &lt;a href=&quot;http://www.jboss.org/netty&quot;&gt;Netty&lt;/a&gt; 라이브러리를 사용, 비동기 방식으로 IO를 처리하여 서버의 성능을 높임 (nonb-locking I/O)&lt;/li&gt;
  &lt;li&gt;JUnit 기반 테스팅 프레임워크를 내장&lt;/li&gt;
  &lt;li&gt;JPA 기반 ORM&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;section&quot;&gt;시작하기&lt;/h3&gt;

&lt;p&gt;이 밖에 더 자세한 내용은 아래 참고자료를 참고하기로 하고, 우선 간단하게 Play!를 시작해 보기로 하자. 설치는 파일을 다운로드하여 적당한 디렉터리에서 압축을 풀어주면 완료된다. (Mac OSX에서 &lt;a href=&quot;http://mxcl.github.com/homebrew/&quot;&gt;Homebrew&lt;/a&gt;를 사용한다면 명령행에서 brew install 하면 된다).&lt;/p&gt;

&lt;pre&gt;
$ play new myplay
$ cd myplay
$ play run
&lt;/pre&gt;

&lt;p&gt;이제 브라우저에서 http://localhost:9000/ 으로 접속하면 이미 Play가 시작된 것을 확인할 수 있을 것이다.&lt;/p&gt;

&lt;h3 id=&quot;mvc--&quot;&gt;MVC 디렉터리 구조&lt;/h3&gt;

&lt;p&gt;Play framework의 디렉터리 구조는 다음과 같다. app 디렉터리 아래에 각각 model, controller, view 디렉터리가 위치하고 conf에는 애플리케이션 설정 및 routes 설정 등 각종 설정파일이, lib에는 외부 jar 파일이 담기고, public은 자바스크립트나 스타일시트, 이미지 같은 정적인 파일들이 담기는 공간이다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://farm7.static.flickr.com/6057/6353625503_8110c05881.jpg&quot; alt=&quot;directory structure of Play frx&quot; /&gt;&lt;/p&gt;

&lt;p&gt;이 때, 예를 들어, app/models 디렉터리 속에 담긴 User.java는 다음과 같은 형태의 코드로 구성된다. 이 클래스는 User모델로서 데이터베이스의 User 테이블과 OR 맵핑된다. (참고로 개발환경에서 이 소스코드의 컴파일은 동적으로 처리되며 tmp/ 디렉터리 아래에 자동으로 생성된다는 점이 특이하다).&lt;/p&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;
package models;
 
import java.util.*;
import javax.persistence.*;
 
import play.db.jpa.*;
 
@Entity
public class User extends Model {
 
    public String email;
    public String password;
    public String fullname;
    public boolean isAdmin;
    
    public User(String email, String password, String fullname) {
        this.email = email;
        this.password = password;
        this.fullname = fullname;
    }
 
}
&lt;/pre&gt;

&lt;h3 id=&quot;section-1&quot;&gt;배포하기&lt;/h3&gt;

&lt;p&gt;애플리케이션이 만들어 졌다면 배포해야 한다. Amazon EC2 기반의 앱 클라우드 플랫폼인 &lt;a href=&quot;http://blog.heroku.com/archives/2011/8/29/play/&quot;&gt;Heroku가 최근 Play framework을 지원&lt;/a&gt;하기 때문에 Heroku를 이용하면 간단히 배포할 수 있다. 소스 버전 관리는 git으로 한다는 가정 하에, 명령행에서 다음 명령으로 배포가 완료된다.&lt;/p&gt;

&lt;pre&gt;
$ heroku create --stack ceder
$ git push heroku master
$ heroku open
&lt;/pre&gt;

&lt;h3 id=&quot;section-2&quot;&gt;참고자료&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.playframework.org/&quot;&gt;Play Framework&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.playframework.org/documentation/1.2.3/5things&quot;&gt;Five cool things you can do with Play&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://devcenter.heroku.com/articles/play&quot;&gt;Getting Started with Play! on Heroku/Cedar&lt;/a&gt; &lt;/li&gt;
&lt;/ul&gt;
</content>
 </entry>
 
 <entry>
   <title>루비 기반 오픈소스 CMS 솔루션들</title>
   <link href="http://usefulparadigm.com/2011/10/31/ruby-based-opensource-cms-solutions"/>
   <updated>2011-10-31T00:00:00+09:00</updated>
   <id>http://usefulparadigm.com/2011/10/31/ruby-based-opensource-cms-solutions</id>
   <content type="html">&lt;p&gt;요즘 웹사이트나 블로그 만드는 일은 더 이상 별로 어려운 작업이 아니다. 불과 몇 년 전만 하더라도 
조금 근사한 수준의 사이트를 만들 경우 비싼 비용을 지불하고 또 전문 업체에 의뢰하는 경우가 많았지만 
최근에는 굳이 그럴 필요가 많이 없어졌다. 이제 누구든 손쉽고 빠르게 자신의 웹사이트나 블로그를 만들고 지우고
할 수 있는 세상이 된 것이다. &lt;/p&gt;

&lt;p&gt;이렇게 된 데에는 여러 이유가 있겠지만 그 중 쉽게 콘텐츠를 만들어 웹 상에 올릴 수 있게 도와주는 좋은 콘텐츠 관리 도구(Content 
Management System) 들이 많이 출시된 것도 직접적인 원인 중 하나일 것이다. &lt;/p&gt;

&lt;p&gt;소스가 공개된 콘텐츠 관리 도구 중 대표적인 것으로는 &lt;a href=&quot;http://wordpress.org/&quot;&gt;WordPress&lt;/a&gt;, 
&lt;a href=&quot;http://drupal.org/&quot;&gt;Drupal&lt;/a&gt;,  &lt;a href=&quot;http://www.xpressengine.com/&quot;&gt;XE&lt;/a&gt;, 
&lt;a href=&quot;http://www.joomla.org/&quot;&gt;Zoomla&lt;/a&gt; 등이 있겠지만, 이들 도구/솔루션에 대해서는 이미 많은 곳에서
자세히 소개하고 있기에 여기서는 루비 기반의 오픈소스 CMS 도구를 몇 가지 소개해 본다.&lt;/p&gt;

&lt;h3 id=&quot;radiant&quot;&gt;Radiant&lt;/h3&gt;

&lt;p&gt;&lt;a href=&quot;http://radiantcms.org/&quot;&gt;Radiant CMS&lt;/a&gt;는 루비 기반 CMS 중에서는 비교적 오랜 축에 속한다. 
간단한 관리자 화면을 통해 페이지와 레이아웃을 관리할 수 있기 때문에 간단한 웹페이지나 사이트를 만드는데 좋다.
루비온레일스 프레임워크 기반으로 확장(extention) 시스템을 제공한다. 현재 버전은 0.9.0로 MIT 라이선스를 따른다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://radiantcms.org/images/screenshot.jpg&quot; alt=&quot;Radiant&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;refinerycms&quot;&gt;RefineryCMS&lt;/h3&gt;

&lt;p&gt;&lt;a href=&quot;http://refinerycms.com/&quot;&gt;Refinery CMS&lt;/a&gt; 역시 루비온레일스 프레임워크 기반에서 작동하며
주로 루비온레일스 기반 애플리케이션에 CMS 기능을 추가하는 용도로 사용하기 쉽게 설계되었다. 
콘텐츠는 WYSIWYG 에디터를 통해 쉽게 편집할 수 있게 되어 있으며 간단한 관리자 UI를 제공한다.
“Engine” 이라는 이름의 확장 플러그인 기반에서는 제법 많은 확장 모듈들을 제공하고 있다.
현재 버전은 1.0.8이며 MIT 라이선스를 따른다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://refinerycms.com/images/refinery-screenshot.png?1290654959&quot; alt=&quot;Refinery&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;locomotive&quot;&gt;Locomotive&lt;/h3&gt;

&lt;p&gt;&lt;a href=&quot;http://locomotivecms.com/&quot;&gt;Locomotive&lt;/a&gt; 역시 루비온레일스 기반의 오픈소스 CMS 솔루션이다.
Locomotive는 하나의 CMS 속에 여러 개의 사이트를 호스팅할 수 있고 
설계부터 Heroku나 Amazon S3를 호스팅 플랫폼으로 상정하고 개발되었기 때문에 클라우드 기반 CMS 호스팅이
필요한 경우에도 사용할 수 있을 것이다. 확장 모듈을 제공하며 MIT 라이선스를 따른다.&lt;/p&gt;

&lt;h3 id=&quot;browsercms&quot;&gt;BrowserCMS&lt;/h3&gt;

&lt;p&gt;&lt;a href=&quot;http://www.browsercms.org/&quot;&gt;BrowserCMS&lt;/a&gt;는 단순히 CMS라기 보다는 루비온레일스 프레임워크의 CMS 확장이라고
보는 것이 좋겠다. 이 솔루션은 루비온레일스 기반에 엔터프라이즈 급의 CMS 기능들을 추가해 주기 때문에
루비온레일스 애플리케이션을 강력한 CMS 도구로 만들어 준다. 현재 버전은 3.3.2이며 GPLv3 라이선스를 따른다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://www.browsercms.org/image1.jpg&quot; alt=&quot;BrowserCMS&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;section&quot;&gt;기타&lt;/h3&gt;

&lt;p&gt;그 밖에도 많은 &lt;a href=&quot;https://www.ruby-toolbox.com/categories/content_management_systems&quot;&gt;루비 기반 CMS 솔루션들&lt;/a&gt;이 나와 있다. &lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;http://nestacms.com/&quot;&gt;Nesta&lt;/a&gt;는 정말이지 가벼운 CMS인데 다른 CMS 솔루션들처럼 데이터베이스를 저장소로 사용하지 않고
git 저장소를 CMS 저장소로 사용하는 Sinatra 기반의 앱이다. &lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;http://jekyllrb.com/&quot;&gt;Jekyll&lt;/a&gt; 역시 데이터베이스가 아닌 git 저장소 기반의 CMS 솔루션이며, 특히 Jekyll은 
&lt;a href=&quot;http://pages.github.com/&quot;&gt;github page&lt;/a&gt;에서 사용할 수 있으며, 
이 경우 &lt;a href=&quot;http://github.com&quot;&gt;github&lt;/a&gt;를 간단하게 자신의 웹사이트 또는 블로그로 만들 수 있다.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;
</content>
 </entry>
 
 <entry>
   <title>WordPress에서 Sass/Compass 사용하기</title>
   <link href="http://usefulparadigm.com/2011/07/28/using-sass-and-compass-in-wordpress"/>
   <updated>2011-07-28T00:00:00+09:00</updated>
   <id>http://usefulparadigm.com/2011/07/28/using-sass-and-compass-in-wordpress</id>
   <content type="html">&lt;p&gt;이전에도 한번 &lt;a title=&quot;CSS 개발의 생산성을 높이는 도구들&quot; href=&quot;http://usefulparadigm.com/2011/03/18/productive-css-development-tools/&quot;&gt;소개&lt;/a&gt;한 것처럼 &lt;a href=&quot;http://sass-lang.com/&quot;&gt;Sass&lt;/a&gt;와 &lt;a href=&quot;http://compass-style.org/&quot;&gt;Compass&lt;/a&gt;는 CSS 개발의 생산성을 높여주는 유용한 도구들이다. 부연하자면, Sass는 &lt;a href=&quot;http://sass-lang.com/docs/yardoc/file.SASS_REFERENCE.html#variables_&quot;&gt;변수(variable)&lt;/a&gt;, &lt;a href=&quot;http://sass-lang.com/docs/yardoc/file.SASS_REFERENCE.html#mixins&quot;&gt;믹스인(mixins)&lt;/a&gt; 같은 개념들을 통해 CSS를 모듈화시켜 코드의 재활용성을 높여주는 반면, Compass는 이런 Sass의 강력한 기능들을 플러그인 형태의 확장 구조로 다시 한번 추상화 시킴으로써 HTML5/CSS3 같은 복잡한 최신 CSS 개발 환경에서도 쉽고 일관되게 CSS 개발을 가능하게 도와주는 강력한 개발 도구(authoring framework) 인 셈이다.&lt;/p&gt;

&lt;a title=&quot;View 'compass-css-framework' on Flickr.com&quot; href=&quot;http://www.flickr.com/photos/60489948@N04/5983951868&quot;&gt;&lt;img class=&quot;alignright&quot; style=&quot;margin: 10px;&quot; title=&quot;compass-css-framework&quot; src=&quot;http://farm7.static.flickr.com/6021/5983951868_144fa6837d_m.jpg&quot; border=&quot;0&quot; alt=&quot;compass-css-framework&quot; width=&quot;240&quot; height=&quot;150&quot; /&gt;&lt;/a&gt;


&lt;p&gt;Sass와 Compass는 주로 루비/레일스 커뮤니티에서 공유되고 사용되는 것으로 알려져 있지만 반드시 루비 환경에서만 동작하는 건 아니다. 실은 특정 개발 환경에 중립적이기 때문에 오히려 루비가 아닌 다른 환경에서도 그 진가를 발휘하는 좋은 CSS 개발 도구라  할 것이다. 예컨대 WordPress 의 테마(theme)를 개발할 때도 이 Sass/Compass 콤비네이션을 활용할 수 있다. 여기서 간단히 그 방법을 소개한다.&lt;/p&gt;

&lt;h3&gt;기본 전제&lt;/h3&gt;
&lt;ol&gt;
	&lt;li&gt;Sass/Compass는 이미 설치되었다고 가정한다. (설치에 관해서는 여기를 참조)&lt;/li&gt;
	&lt;li&gt;작업할 워드프레스 테마 디렉터리가 이미 만들어져 있다고 가정한다.&lt;/li&gt;
&lt;/ol&gt;

&lt;h3&gt;단계별 절차&lt;/h3&gt;
&lt;p&gt;워드프레스 테마의 루트 디렉터리에서 다음과 같은 compass 명령으로 설정파일을 하나 생성한다.&lt;/p&gt;
&lt;blockquote&gt;$ compass config --css-dir=.&lt;/blockquote&gt;

&lt;p&gt;디폴트로 이 파일은 config/compass.rb 로 생성되는데, 이 파일을 열어 보면 다음과 같이 기본적인 설정이 선언되어 있다. (물론 설정값은 프로젝트에 맞게 조정할 수 있다)&lt;/p&gt;

&lt;pre&gt;
http_path = &quot;/&quot;
css_dir = &quot;.&quot;
sass_dir = &quot;sass&quot;
images_dir = &quot;images&quot;
javascripts_dir = &quot;javascripts&quot;
&lt;/pre&gt;

&lt;p&gt;이제 위의 설정에 맞게 테마 프로젝트의 디렉터리 경로들을 조정했다면 sass 디렉터리를 하나 주가하고, 그 속에 sass파일을 하나 만들자. 여기서는 style.scss 라고 하였고, 그 속에 다음과 같이 간단하게 몇 줄의 코드를 추가해 보았다. (참고로 여기 코드는 어디까지나 샘플이며, 실제 프로젝트에서는 조금 더 모듈화가 필요할 것이다. 자세한 내용은 &lt;a href=&quot;http://compass-style.org/help/tutorials/best_practices/&quot;&gt;Comass BestPractice 문서&lt;/a&gt;를 참조)&lt;/p&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;
@import &quot;compass&quot;;

#box {
  text-align: justify;
  background-color: #dedede;
  @include border-radius();
}
&lt;/pre&gt;

&lt;p&gt;위의 코드를 간단하게 설명하자면, 우선 1행에서 &lt;a href=&quot;http://compass-style.org/reference/compass/&quot;&gt;compass 모듈&lt;/a&gt;을 로드한다. 이 모듈은 compass의 기본 모듈인데, 그 속에는 CSS3 처리나 타이포그래피(typography), 기타 각종 유틸리티 모듈들이 포함되어 있기 때문에 프로젝트에서는 별도의 CSS 코딩 없이 바로 이 모듈에서 미리 만들어 제공하고 있는 CSS 코드들을 활용할 수 있는 것이다. 예를 들어, 위의 sass 파일에서는 6행에서 ID가 #box인 DOM 문서 객체에 대해 border-radius() 라는 믹스인을 적용하고 있다. 이 단 한 줄의 코드 삽입만으로 모든 CSS3 지원 브라우저에서 호환되는 둥근모서리 스타일링이 간단하게 처리된다.&lt;/p&gt;

&lt;p&gt;방금 전까지 작성한 파일은 CSS 가 아닌 sass/scss 파일이었다. 그렇다면 이제 이 파일을 브라우저가 인식할 수 있는 CSS로 컴파일하는 일만 남았다. compass에서 제공하는 다음 명령을 띄워 놓으면 sass 파일의 변경을 자동으로 감지하여 css 파일로 컴파일시켜준다.&lt;/p&gt;

&lt;blockquote&gt;$ compass watch&lt;/blockquote&gt;

&lt;p&gt;이제 브라우저에서 확인해 보면 방금전 우리가 만든 style.scss 파일이 컴파일 되어 자동으로 style.css 파일이 생성된 것을 확인할 수 있을 것이다. 나머지 작업들은 통상적인 워드프레스 테마 개발 과정을 따르면 된다.&lt;/p&gt;

&lt;h3&gt;참고자료&lt;/h3&gt;
&lt;ul&gt;
	&lt;li&gt;&lt;a href=&quot;http://wynnnetherland.com/blog/sass-up-your-wordpress-themes-with-compass&quot;&gt;compass-wordpress 라는 루비 젬을 이용하는 방법에 대한 소개 자료&lt;/a&gt;&lt;/li&gt;
	&lt;li&gt;&lt;a href=&quot;http://adamstacoviak.com/posts/using-rake-rsync-for-wordpress-deployment/&quot;&gt;rake + rsync 를 이용한 테마 프로젝트의 배포&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content>
 </entry>
 
 <entry>
   <title>WordPress와 페이스북 OpenGraph 연동하기</title>
   <link href="http://usefulparadigm.com/2011/07/22/integrating-wordpress-with-opengraph"/>
   <updated>2011-07-22T00:00:00+09:00</updated>
   <id>http://usefulparadigm.com/2011/07/22/integrating-wordpress-with-opengraph</id>
   <content type="html">&lt;p&gt;&lt;img class=&quot;left&quot; style=&quot;margin: 10px;&quot; title=&quot;facebook-wordpress&quot; src=&quot;/img/uploads/2011/07/99-150x150.jpg&quot; alt=&quot;&quot; width=&quot;100&quot; height=&quot;100&quot; /&gt;페이스북 &lt;a href=&quot;https://developers.facebook.com/docs/opengraph/&quot;&gt;OpenGraph 프로토콜&lt;/a&gt;은 웹 상의 콘텐츠를 페이스북 속 소셜 그래프(social graph)와 연결할 때 사용하는 일종의 메타 데이터(meta data)라고 할 수 있다. 이 프로토콜을 사용하게 되면 웹 상의 어떤 콘텐츠에 대한 메타 정보들, 예를 들면 제목이라든지 URL, 또는 썸네일 이미지나 설명 같은 것들을 그대로 페이스북으로 전달할 수가 있는데, 실제 이런 정보의 전달은 사용자가 웹 페이지에 있는 &quot;&quot;좋아요(Like)&quot; 버튼을 클릭할 때 일어나게 된다. 이 때 페이스북은 전달받은 URL의 페이지를 읽어서 OpenGraph 프로토콜에 맞는 메타데이터 정보가 있는지를 검사하게 되고, 있을 경우 이들 정보를 사용자의 프로파일(담벼락)  등에서 표시할 때 사용하게 된다(그림1).&lt;/p&gt;

&lt;p&gt;뿐만 아니라 이렇게 OpenGraph를 통해 연결된 웹사이트의 콘텐츠가 업데이트될 경우 그 업데이트 정보가 해당 콘텐츠를 좋아요(Like)한 사용자에게 곧바로 알려지기 때문에 마치 실시간으로 PUSH를 보내는 것과 같은 기능을 만들어 낼 수도 있다. OpenGraph 프로토콜에 대한 자세한 내용은 페이스북 개발자 문서를 참고하길 바라며, 이 글에서는 이런 페이스북 OpenGraph 프로토콜을 오픈소스 CMS툴인 워드프레스(WordPress)에서 사용하는 방법만 간단히 소개한다.&lt;/p&gt;

&lt;img class=&quot;alignnone&quot; title=&quot;OpenGraph Protocol&quot; src=&quot;https://developers.facebook.com/images/devsite/open-graph.png&quot; alt=&quot;&quot; width=&quot;587&quot; height=&quot;157&quot; /&gt;
[그림1] OpenGraph 프로토콜 소개

&lt;p&gt;워드프레스에서 OpenGraph 프로토콜을 사용하는 것은 다른 통상적인 웹사이트에서 OpenGraph를 사용하는 것과 전혀 다를 것이 없다. 통상적으로 어떤 웹사이트에 OpenGraph 프로토콜을 적용하려면 다음과 같은 절차를 거치게 된다.&lt;/p&gt;

&lt;ol&gt;
	&lt;li&gt;웹페이지의 &amp;lt;head&amp;gt; 영역에 페이스북 OpenGraph에서 필요로 하는 일련의 메타 태그를 삽입한다. 이 때 각각의 페이지마다 달라지는 정보들(예: 제목, URL, 썸네일, 설명 등)은 그에 맞게 동적으로 처리해 준다.&lt;/li&gt;
	&lt;li&gt;페이스북에서 제공하는 Like 버튼과 같은 플러그인을 웹페이지에 추가한다.&lt;/li&gt;
	&lt;li&gt;페이스북 개발자 페이지에 들어가서 웹사이트를 등록하고 app_id를 받아서 앞서 OpenGraph 메타 태그에 적어 준다.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;이렇게 해서 만들어진 통상적인 OpenGraph 태그의 구조는 아래와 같다. (자세한 설명은 &lt;a href=&quot;https://developers.facebook.com/docs/reference/plugins/like/&quot;&gt;페이스북 문서&lt;/a&gt; 참조)&lt;/p&gt;

&lt;script src=&quot;https://gist.github.com/1099227.js?file=gistfile1.html&quot;&gt;&lt;/script&gt;

&lt;p&gt;워드프레스라서 달라지는 점이 있다면 이 메타 태그들을 워드프레스의 템플릿 페이지(통상적으로는 header.php) 에 삽입한다는 정도일 것이다.&lt;/p&gt;

&lt;h4&gt;참고자료&lt;/h4&gt;

&lt;ul&gt;
	&lt;li&gt;OpenGraph 프로토콜을 적용한 후에는 페이스북에서 제공하는 &lt;a href=&quot;http://developers.facebook.com/tools/lint/&quot;&gt;URL Lint 도구&lt;/a&gt;를 이용하여 페이지에 OpenGraph 프로토콜이 제대로 설정되었는지 확인하는 것이 좋다.&lt;/li&gt;
	&lt;li&gt;Like 버튼 플러그인을 직접 적용하지 않고 &lt;a href=&quot;http://developers.facebook.com/tools/lint/&quot;&gt;AddThis&lt;/a&gt; 같은 소셜 버튼 위젯과 함께 사용해도 무방하다.&lt;/li&gt;
	&lt;li&gt;워드프레스 플러그인 중에는 페이스북 OpenGraph 데이터를 직접 내장시켜 주는 여러 종류의 플러그인들이 이미 나와 있다. 이들 중 하나를 사용하면 위의 작업을 직접하는 수고를 덜 수 있어 편리하다. 그 중 &lt;a href=&quot;http://wordpress.org/extend/plugins/ogp/&quot;&gt;Open Graph Pro&lt;/a&gt;를 추천함.&lt;/li&gt;
&lt;/ul&gt;
</content>
 </entry>
 
 <entry>
   <title>기업용으로 활용가능한 오픈소스 SNS 솔루션들</title>
   <link href="http://usefulparadigm.com/2011/06/21/oss-social-networking-solutions-for-enterprise"/>
   <updated>2011-06-21T00:00:00+09:00</updated>
   <id>http://usefulparadigm.com/2011/06/21/oss-social-networking-solutions-for-enterprise</id>
   <content type="html">&lt;p&gt;
&lt;img src=&quot;/img/uploads/2011/06/social-network.jpg&quot; class=&quot;right&quot; /&gt;

트위터나 페이스북 같은 소셜 네트워킹 서비스의 인기와 효용성에 힘입어 기업에서도 이런 솔루션들을 도입하여 조직 내부에서 수평적이고 자유로운 커뮤니케이션 문화를 조성하고 보다 격의없고 창의성 있는 생각과 아이디어를 조직원들 간에 서로 공유하려는 움직임들이 생겨나고 있다. 해외에서는 이미 오래 전에 yammer 같은 기업용 SNS 서비스들이 출시되어 인기를 끌었고, 국내에서도 몇몇 업체들이 기업용 SNS 솔루션을 만들어 제공 중이다. 또한 작년부터 주로 대기업을 중심으로 하여 사내 SNS 서비스를 구축한 사례들이 등장하고 올해에는 공공기관에서도 이런 사내 SNS망을 구축하여 사용하는 움직임이 보인다. 기업 또는 조직 내에서 소셜 네트워킹을 구축하여 사내의 새로운 문화로 정착시키려는 움직임은 향후에도 계속 확산될 것으로 보인다.&lt;/p&gt;

&lt;p&gt;기업용 SNS를 위해 가장 많이 사용하는 서비스는 아마도 &lt;a href=&quot;https://www.yammer.com/&quot;&gt;야머(yammer)&lt;/a&gt;일 것이다. 알다시피 yammer는 이메일 주소를 식별코드로 사용하여 같은 이메일 도메인을 사용하는 사람들만의 네트워크를 형성해 주고 그 속에서 소셜 네트워킹을 할 수 있게 만들어주는 서비스이다. 국내에서도 이미 많은 기업과 공공기관에서 도입해서 사용 중인 서비스이기도 하다.&lt;/p&gt;

&lt;img class=&quot;left&quot; style=&quot;margin: 10px;&quot; title=&quot;yammericon.jpg&quot; src=&quot;/img/uploads/2011/06/yammericon1.jpg&quot; border=&quot;0&quot; alt=&quot;Yammericon&quot; width=&quot;126&quot; height=&quot;126&quot; /&gt;

&lt;p&gt;그런데 이런 &quot;호스팅 방식&quot;의 서비스에서는 종종 보안과 관련된 우려가 제기되곤 한다. 물론 yammer 같은 서비스는 이런 사용자들의 우려를 감안하여 보안에 많은 신경을 쓰고 있지만, 그래도 &quot;DMZ&quot; 안에서 돌아가는 것과 밖에서 돌아가는 것 간에는 최소한 사용자들이 인식하는 심리적인 안정감에서라도 차이가 날 수 있다. 그래서 이런 호스팅 방식의 서비스를 쓰는 기관들도 종종 보안을 위해 별도의 솔루션을 가져가기도 한다.&lt;/p&gt;

&lt;p&gt;여기서 소개할 솔루션들은 이런 경우에 사용할 수 있는 오픈소스 SNS 솔루션들이다. 이미 검색엔진으로 검색해보면 헤아릴 수도 없을 만큼 많은 솔루션들이 시장에 출시되어 있고, 또 그 중에서 오픈소스 형태로 제공되는 솔루션들도 많은 것이 사실이다. 너무 많아 오히려 선택하기가 어려울 지경이라고 해야 할 것이다. 물론 &quot;SNS&quot; 라고 하는 것이 별로 &quot;만들기 어려운&quot; 솔루션도 아닌데다 사내 인트라넷 등 타 시스템과의 연동도 필요한 부분이 있고 또 조직 문화의 문제도 있는 탓에 직접 구축해서 사용하는 경우도 많겠지만, 지금 소개할 몇 가지 솔루션들도 기업용 SNS를 구축할 경우에 검토해 볼만 할 것이라 생각한다.&lt;/p&gt;

&lt;h3&gt;1. StatusNet&lt;/h3&gt;

&lt;p&gt;첫번째로 소개할 솔루션은 &lt;a href=&quot;http://status.net/&quot;&gt;StatusNet&lt;/a&gt;이다. 이미 &lt;a href=&quot;http://identi.ca/&quot;&gt;identi.ca&lt;/a&gt; 라는 서비스에서 실전 서비스를 하고 있고, 스마트폰과 데스크탑용 앱도 가지고 있는 이 SNS 솔루션은 &lt;a href=&quot;http://ostatus.org/&quot;&gt;oStatus&lt;/a&gt;라는 표준 스펙을 따르는 분산형 SNS(Federated SNS)이기도 하다. 트위터와 유사하 마이크로 블로깅(microblogging)을 기본으로 하지만 그룹을 생성할 수도 있고 메신저와의 연동도 가능한 장점이 있다. 분산형 SNS이기 때문에 여러 SNS 간에 서로 연결될 수도 있는 것도 장점이라 하겠다. PHP/MySQL 기반이며 현재 버전은 0.9.7로 곧 1.0 버전이 나올 예정인 이 솔루션은 &lt;a href=&quot;http://www.gnu.org/licenses/agpl.html&quot;&gt;AGPL&lt;/a&gt; 라이선스를 따른다.&lt;/p&gt;

&lt;img title=&quot;statusnet.png&quot; src=&quot;/img/uploads/2011/06/statusnet2.png&quot; border=&quot;0&quot; alt=&quot;Statusnet&quot; width=&quot;600&quot; height=&quot;187&quot; /&gt;

&lt;h3&gt;2. Diaspora&lt;/h3&gt;

&lt;p&gt;다음으로 소개할 솔루션은 &lt;a href=&quot;https://joindiaspora.com/&quot;&gt;디아스포라(diaspora)&lt;/a&gt;라고 하는 SNS 솔루션이다. StatusNet과 마찬가지로 역시 분산형 SNS를 표방하는 이 솔루션은 얼마 전 페이스북의 창업자 마크 쥬커버그로부터 지원금을 받아 화제가 되기도 했던 솔루션인데, 작년 가을에 알파버전을 오픈하면서 서비스를 개시했다. 특히 이 솔루션은 애스팩(aspect) 이라는 그룹 기능을 두어 그룹 간에서만 서로 커뮤니케이션을 하는 방법을 지원하기 때문에 사내에서도 어느 정도의 프라이버시 수준을 유지할 수 있는 장점이 있다. Ruby on Rails 기반이며, &lt;a href=&quot;http://www.gnu.org/licenses/agpl.html&quot;&gt;AGPL&lt;/a&gt; 라이선스를 따른다.&lt;/p&gt;

&lt;img title=&quot;diaspora.png&quot; src=&quot;/img/uploads/2011/06/diaspora.png&quot; border=&quot;0&quot; alt=&quot;Diaspora&quot; width=&quot;600&quot; height=&quot;164&quot; /&gt;

&lt;h3&gt;3. 기타&lt;/h3&gt;

&lt;p&gt;기존의 인트라넷이나 사이트를 가지고 있는 조직에서 소셜 기능을 추가하고 싶다면 &lt;a href=&quot;http://www.elgg.org/index.php&quot;&gt;elgg&lt;/a&gt; 같은 SNS 엔진(engine)을 검토해 보는 것도 좋겠다. 페이스북 같은 플랫폼이 만들어진다.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://buddypress.org/&quot;&gt;버디프레스(BuddyPress)&lt;/a&gt;는 오픈소스 블로깅 솔루션인 워드프레스(WordPress)에 호감이 있는 조직이라면 관심을 가져볼만한 솔루션이다. 이 솔루션은 WordPress의 플러그인 형태로 제공되는 솔루션으로 워드프레스의 강력한 확장성을 잘 보여주는 솔루션이라 할 것이다.&lt;/p&gt;

&lt;p&gt;마지막으로, Ruby on Rails 기반 솔루션을 두어 가지 소개하고 끝을 맺기로 한다. StatusNet과 같은 oStatus 프로토콜을 사용하면서도 RoR로 된 솔루션을 찾는다면 &lt;a href=&quot;http://rstat.us/&quot;&gt;rStat.us&lt;/a&gt; 가 답이 될 수도 있다. 정확하게 SNS 만을 겨냥한 것은 아니지만, 작은 조직이나 팀 단위에서 프로젝트 관리도 하고 마이크로블로깅 기반 커뮤니케이션도 함께 할 수 있는 솔루션을 찾는다면 &lt;a href=&quot;http://teambox.com/&quot;&gt;팀박스(Teambox)&lt;/a&gt;도 고려해 볼만 한다.&lt;/p&gt;</content>
 </entry>
 
 <entry>
   <title>CSS 개발의 생산성을 높이는 도구들</title>
   <link href="http://usefulparadigm.com/2011/03/18/productive-css-development-tools"/>
   <updated>2011-03-18T00:00:00+09:00</updated>
   <id>http://usefulparadigm.com/2011/03/18/productive-css-development-tools</id>
   <content type="html">&lt;p&gt;&lt;img class=&quot;attachment right&quot; src=&quot;http://farm6.static.flickr.com/5219/5535334248_eacd7eede0_m.jpg&quot; alt=&quot;&quot; width=&quot;240&quot; height=&quot;120&quot; /&gt;CSS는 웹사이트 디자인에 사용하는 도구다. 개념도 복잡하지 않고 문법도 간단하기 때문에 Box 모델이나 플로팅(floating) 같은 몇 가지 기본 개념만 익히고 나면 약간의 코딩 만으로 웹사이트에 멋진 비주얼 요소를 집어넣을 수가 있다. 그렇지만 매번 웹사이트를 만들 때마다 일일이 처음부터 CSS 작업을 하는 일은 경우에 따라서는 제법 성가시고 품이 많이 가는 일이기도 하다. 특히 IE의 비정상적인 작동을 바로잡기 위한 핵(Hack) 까지 고려한다면 더욱 그렇다. CSS 개발의 생산성을 높여주는 몇 가지 도구들에 대해 알아보자.&lt;/p&gt;

&lt;h3&gt;1. CSS 프레임워크&lt;/h3&gt;
&lt;p&gt;CSS 프레임워크(framework)는 미리 만들어 놓은 일종의 CSS 모듈이다. CSS 프레임워크를 사용하면 페이지의 기본 레이아웃에서부터 타이포그라피, 폼 디자인, 버튼 등 많은 부분의 디자인을 &quot;날로 먹을 수&quot;가 있다. 물론 모든 &quot;프레임워크&quot;가 그러하듯, CSS 프레임워크도 언제나 &quot;최선&quot;의 선택인 것은 아니며, 어떤 디자이너나 개발자들은 CSS 프레임워크 자체에 거부감을 가지기도 한다. 그렇지만 CSS 프레임워크가 개발 생산성을 높여줄 수 있다는 점에서는 이론의 여지가 없다. 그만큼 그 종류도 다양하기 때문에 오히려 어떤 것을 선택하느냐가 더 고민이 되는 경우가 많지만, 몇 가지 대표적인 것들만 소개하면 다음과 같다.&lt;/p&gt;

&lt;ul&gt;
	&lt;li&gt;&lt;a class=&quot;external&quot; title=&quot;http://960.gs/&quot; href=&quot;http://960.gs/&quot;&gt;960 Grid System&lt;/a&gt;&lt;/li&gt;
	&lt;li&gt;&lt;a class=&quot;external&quot; title=&quot;http://www.blueprintcss.org/&quot; href=&quot;http://www.blueprintcss.org/&quot;&gt;Blueprint&lt;/a&gt;&lt;/li&gt;
	&lt;li&gt;&lt;a class=&quot;external&quot; title=&quot;http://elasticss.com/&quot; href=&quot;http://elasticss.com/&quot;&gt;Elastic CSS Framework&lt;/a&gt;&lt;/li&gt;
	&lt;li&gt;&lt;a class=&quot;external&quot; title=&quot;http://developer.yahoo.com/yui/grids/&quot; href=&quot;http://developer.yahoo.com/yui/grids/&quot;&gt;YUI Grid CSS&lt;/a&gt;&lt;/li&gt;
	&lt;li&gt;&lt;a class=&quot;external&quot; title=&quot;http://lessframework.com/&quot; href=&quot;http://lessframework.com/&quot;&gt;Less Framework&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;이들 중 대부분의 CSS 프레임워크는 소위 &quot;그리드(grid) 디자인&quot;에 기반하지만, 자바스크립트와 함께 사용하여 UI 효과를 내는 것들도 있고, 또 최근에는 HTML5/CSS3를 이용한 CSS 프레임워크들이 많이 등장하고 있다.&lt;/p&gt;

&lt;h3&gt;2. SASS와 LESS&lt;/h3&gt;
&lt;p&gt;SASS와 LESS는 일종의 CSS 전처리기(pre-processor)다. 조금 더 간단하고 구조화된 문법으로 코드를 작성하면 자동으로 CSS 파일을 생성해 주기 때문에 CSS 개발의 생산성을 폰이는 데에 꼭 필요한 도구이기도 하다. 특히 믹스인(Mixin)이라는 개념은 일종의 '모듈'을 만드는 것으로서, CSS 코드 재활용을 높이고 생산성을 높여주는 좋은 개념이다. SASS는 루비(ruby) 언어로 작성되었고, 그래서 주로 루비/레일스 프로젝트에서 많이 사용되지만 반드시 그래야 하는 건 아니다.&lt;/p&gt;

&lt;p&gt;LESS(앞서 소개한 Less Framework과는 별개)도 SASS와 개념은 유사하지만, CSS파일의 생성이 자바스크립트 파서(parser)를 통해 클라이언트 측에서 이루어진다는 점에서, 서버측에서 컴파일이 이루어지는 SASS와 구별된다. 물론 LESS는 Node.js 환경에서도 작동한다. 이들 도구의 홈페이지는 각각 다음과 같다.&lt;/p&gt;

&lt;ul&gt;
	&lt;li&gt;SASS &lt;a href=&quot;http://sass-lang.com/&quot;&gt;http://sass-lang.com/&lt;/a&gt;&lt;/li&gt;
	&lt;li&gt;LESS &lt;a href=&quot;http://lesscss.org/&quot;&gt;http://lesscss.org/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;3. Compass&lt;/h3&gt;

&lt;p&gt;마지막으로 소개할 도구는 일종의 CSS 개발 자동화 도구인 Compass다. 이 도구를 이용하면 앞서 소개한 CSS Framework를 명령행에서 바로 설치할 수도 있고, SASS 컴파일을 자동화 시킬 수도 있으며, 무엇보다도 SASS와 결합하여 CSS의 구성요소를 모듈단위로 쪼개서 SASS 모듈의 재활용성을 높이는 역할을 하는, 일종의 메타(meta) CSS 프레임워크라 할 수 있다. Compass의 사용법은 &lt;a class=&quot;external&quot; title=&quot;http://compass-style.org/&quot; href=&quot;http://compass-style.org/&quot;&gt;Compass 사이트&lt;/a&gt;에 자세히 소개되어 있으니 참조하면 된다.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>루비/레일스 인증처리 라이브러리</title>
   <link href="http://usefulparadigm.com/2011/03/15/ruby-rails-authentication-libraries"/>
   <updated>2011-03-15T00:00:00+09:00</updated>
   <id>http://usefulparadigm.com/2011/03/15/ruby-rails-authentication-libraries</id>
   <content type="html">&lt;p&gt;
&lt;img class=&quot;right&quot; title=&quot;authentication&quot; src=&quot;http://farm6.static.flickr.com/5219/5528988262_da728c673d_m.jpg&quot; alt=&quot;&quot; width=&quot;240&quot; height=&quot;159&quot; /&gt;사용자 인증(Authentication)은 한마디로 사용자 본인이 맞는지를 확인하는 절차다. 웹의 경우, 상태를 유지하지 않는 HTTP 프토토콜의 특성에 기인하여 다양한 인증방식이 존재하지만, 우리가 통상적으로 사용하는 방식은 ID와 비밀번호를 입력하도록 하는 로그인 폼을 보이고 그 폼에 사용자 자신의 신원 정보를 채우도록 해서 인증을 처리하게 된다. 얼핏 간단해 보이는 처리이지만, 사실 웹 개발을 할 때에 이 인증만큼 다양한 '변종'이 존재하는 영역도 드물 것이다. 루비/레일스로 개발을 하는 경우도 마찬가지다. 한 가지 표준 라이브러리가 있어 &quot;이것만 있으면 끝!&quot; 해 버리면 좋겠지만 현실은 그렇지가 못하다. 아래에서 루비/레일스를 이용한 웹 개발에 있어 대표적으로 사용할 수 있는 몇 가지 인증 라이브러리를 소개한다.&lt;/p&gt;

&lt;ul&gt;
	&lt;li&gt;&lt;a class=&quot;external&quot; title=&quot;https://github.com/technoweenie/restful-authentication&quot; href=&quot;https://github.com/technoweenie/restful-authentication&quot;&gt;restful-authentication&lt;/a&gt; 원래 authentication-fu 라는 이름으로 있다가, 레일스가 REST 기반으로 변경되면서 restful-authentication으로 업그레이드되었다. 가장 단순하면서도 커스터마이징에 너그러운 라이브러리로, 지금도 많이 쓰이고 있다.&lt;/li&gt;
	&lt;li&gt;&lt;a class=&quot;external&quot; title=&quot;https://github.com/thoughtbot/clearance&quot; href=&quot;https://github.com/thoughtbot/clearance&quot;&gt;clearance&lt;/a&gt; 재미있는 작품들을 많이 내기로 유명한 thoughtbot의 작품으로, 이메일과 비밀번호 인증만 필요한 경우라면 이보다 더 쉬울 순 없다.&lt;/li&gt;
	&lt;li&gt;&lt;a class=&quot;external&quot; title=&quot;https://github.com/binarylogic/authlogic&quot; href=&quot;https://github.com/binarylogic/authlogic&quot;&gt;authlogic&lt;/a&gt; 인증을 모델(model) 객체 수준으로 끌어올린 멋진 라이브러리이다. 다양한 설정 옵션을 지원하면서도 사용하기가 어렵지 않다.&lt;/li&gt;
	&lt;li&gt;&lt;a class=&quot;external&quot; title=&quot;https://github.com/plataformatec/devise&quot; href=&quot;https://github.com/plataformatec/devise&quot;&gt;devise&lt;/a&gt; 요즘 가장 &quot;인기있는&quot; 인증 라이브러리로 사용하기 쉽고 플러그인을 통한 확장이 용이하다. rack 기반 인증모듈인 warden에 기반한다.&lt;/li&gt;
	&lt;li&gt;&lt;a class=&quot;external&quot; title=&quot;https://github.com/intridea/omniauth&quot; href=&quot;https://github.com/intridea/omniauth&quot;&gt;omniauth&lt;/a&gt; intridea 에서 만든 이 작품은 영역이 조금 다르다. 통상적인 인증이 아닌 OpenID나 Twitter/Facebook 같은 소위 '서드파티3rd party' 인증을 처리한다.&lt;/li&gt;
	&lt;li&gt;&lt;a class=&quot;external&quot; title=&quot;https://github.com/NoamB/sorcery&quot; href=&quot;https://github.com/NoamB/sorcery&quot;&gt;socery&lt;/a&gt; 마지막으로 소개할 라이브러리는 신예다. 이전 라이브러리들의 장점을 모두 합했다고 하며 oauth 인증까지 지원한다. 아직 버전이 낮지만 완성도는 높다.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;대부분의 오픈소스 영역이 그렇지만, 특히 루비/레일스가 재미있는 부분은 이렇게 서로 영감과 아이디어를 주고 받으면서 계속해서 새로운 제품들이 등장하고 또 등장하고 한다는 점이다. 내년 이 맘때는 또 어떤 라이브러리들이 어떤 아이디어를 갖고 나올지 기대되는 이유다.&lt;/p&gt;

&lt;h3&gt;참고자료:&lt;/h3&gt;
&lt;ul&gt;
	&lt;li&gt;&lt;a href=&quot;http://ruby-toolbox.com/categories/rails_authentication.html&quot;&gt;http://ruby-toolbox.com/categories/rails_authentication.html&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
 </entry>
 
 <entry>
   <title>페이스북 소셜 앱 개발 가이드 자료</title>
   <link href="http://usefulparadigm.com/2011/03/10/facebook-app-guide-2011-share"/>
   <updated>2011-03-10T00:00:00+09:00</updated>
   <id>http://usefulparadigm.com/2011/03/10/facebook-app-guide-2011-share</id>
   <content type="html">&lt;!-- &lt;div class=&quot;alert-message block-message info&quot;&gt;
	페이스북 앱 제작 의뢰 및 오픈 그래프 적용 관련 문의는 우측 하단 contact으로 해 주세요!
&lt;/div&gt;	 --&gt;

&lt;p&gt;2011.2.18 &lt;a href=&quot;http://www.bizdeli.com/socialAPP/index.asp&quot;&gt;소셜 앱 개발 성공 전략 컨퍼런스 2011&lt;/a&gt;에서 발표한 &quot;&lt;strong&gt;페이스북에서의 소셜 앱 개발 가이드&lt;/strong&gt;&quot; 발표자료를 공유합니다.&lt;/p&gt;

&lt;div style=&quot;width: 425px;&quot;&gt;&lt;strong style=&quot;display: block; margin: 12px 0 4px;&quot;&gt;&lt;a title=&quot;페이스북 소셜 앱 개발 가이드 2011&quot; href=&quot;http://www.slideshare.net/usefulparadigm/010218&quot;&gt;페이스북 소셜 앱 개발 가이드 2011&lt;/a&gt;&lt;/strong&gt;&lt;object id=&quot;__sse7211982&quot; width=&quot;425&quot; height=&quot;355&quot;&gt;&lt;param name=&quot;movie&quot; value=&quot;http://static.slidesharecdn.com/swf/ssplayer2.swf?doc=010218-110309205605-phpapp01&amp;amp;stripped_title=010218&amp;amp;userName=usefulparadigm&quot; /&gt;&lt;param name=&quot;allowFullScreen&quot; value=&quot;true&quot; /&gt;&lt;param name=&quot;allowScriptAccess&quot; value=&quot;always&quot; /&gt;&lt;embed type=&quot;application/x-shockwave-flash&quot; width=&quot;425&quot; height=&quot;355&quot; src=&quot;http://static.slidesharecdn.com/swf/ssplayer2.swf?doc=010218-110309205605-phpapp01&amp;amp;stripped_title=010218&amp;amp;userName=usefulparadigm&quot; allowfullscreen=&quot;true&quot; allowscriptaccess=&quot;always&quot; name=&quot;__sse7211982&quot;&gt;&lt;/embed&gt;&lt;/object&gt;&lt;/div&gt;
&lt;div id=&quot;__ss_7211982&quot; style=&quot;width: 425px;&quot;&gt;
&lt;div style=&quot;padding: 5px 0 12px;&quot;&gt;View more &lt;a href=&quot;http://www.slideshare.net/&quot;&gt;presentations&lt;/a&gt; from &lt;a href=&quot;http://www.slideshare.net/usefulparadigm&quot;&gt;usefulparadigm&lt;/a&gt;.&lt;/div&gt;
&lt;/div&gt;
&lt;script src=&quot;http://b.scorecardresearch.com/beacon.js?c1=7&amp;amp;c2=7400849&amp;amp;c3=1&amp;amp;c4=&amp;amp;c5=&amp;amp;c6=&quot;&gt;&lt;/script&gt;</content>
 </entry>
 
 <entry>
   <title>OAuth 인증으로 다음 요즘 API 액세스하기</title>
   <link href="http://usefulparadigm.com/2011/03/09/accessing-yozm-api-using-oauth"/>
   <updated>2011-03-09T00:00:00+09:00</updated>
   <id>http://usefulparadigm.com/2011/03/09/accessing-yozm-api-using-oauth</id>
   <content type="html">&lt;img class=&quot;right&quot; title=&quot;361332bf.jpg&quot; src=&quot;http://hueniverse.com/wp-content/uploads/2009/09/OAuth-Shine-300x298.png&quot; alt=&quot;361332bf.jpg&quot; width=&quot;150&quot; height=&quot;149&quot; /&gt;
&lt;p&gt;최근 들어 국내에서도 오픈 API 접근 시에 인증 표준인 OAuth를 적용하는 서비스들이 하나 둘 생겨나고 있다. &lt;a class=&quot;external&quot; title=&quot;http://oauth.net/&quot; href=&quot;http://oauth.net/&quot;&gt;OAuth&lt;/a&gt;는 이미 Facebook이나 Twitter, Google, Yahoo 같은 글로벌 인터넷 서비스에서는 제법 오래 전부터 적용되어 오고 있었지만, 국내에서 OAuth 서비스 제공자를 찾기는 쉽지 않았는데, 이제 다음이나 네이트 같은 대형 포털 사이트에서 OAuth를 적용하기 시작한 것은 반가운 일이 아닐 수 없다.  다음(Daum)에서 제공하는 OAuth 서비스에 대해 간단히 알아보고 이를 이용하여 다음의 SNS 서비스인 &lt;a class=&quot;external&quot; title=&quot;http://yozm.daum.net/&quot; href=&quot;http://yozm.daum.net/&quot;&gt;요즘(yozm&lt;/a&gt;) API에 접근해 보자.&lt;/p&gt;

&lt;p&gt;Daum은 OAuth 1.0을 지원하며 아래 URL로 접근 가능하다.&lt;/p&gt;

&lt;dl&gt;
	&lt;dt&gt;Request 토큰 URL&lt;/dt&gt;
	&lt;dd&gt;&lt;a href=&quot;https://apis.daum.net/oauth/requestToken&quot;&gt;https://apis.daum.net/oauth/requestToken&lt;/a&gt;&lt;/dd&gt;
	&lt;dd&gt;request 토큰 요청시 oauth_callback 값이 컨슈머의&lt;strong&gt;Callback 경로&lt;/strong&gt;와 동일해야 합니다.&lt;/span&gt;&lt;/dd&gt;
	&lt;dt&gt;사용자 인증 URL&lt;/dt&gt;
	&lt;dd&gt;&lt;a href=&quot;https://apis.daum.net/oauth/authorize&quot;&gt;https://apis.daum.net/oauth/authorize&lt;/a&gt;&lt;/dd&gt;
	&lt;dt&gt;Access 토큰 URL&lt;/dt&gt;
	&lt;dd&gt;&lt;a href=&quot;https://apis.daum.net/oauth/accessToken&quot;&gt;https://apis.daum.net/oauth/accessToken&lt;/a&gt;&lt;/dd&gt;
	&lt;dt&gt;서명 메소드는 HMAC-SHA1만 지원됩니다.&lt;/span&gt;&lt;/dt&gt;
&lt;/dl&gt;

&lt;h3&gt;OAuth dance&lt;/h3&gt;

&lt;p&gt;OAuth 인증 절차는 흔히 &quot;OAuth dance&quot;라고 부르는, 아래 그림과 같은 3단계의 인증 절차를 거친다.&lt;/p&gt;

&lt;img class=&quot;attachment&quot; title=&quot;OAuth.JPG&quot; src=&quot;https://dddz3g.bay.livefilestore.com/y1pXkudtRCpXWKlL9RBS9m3Zb7M7A2TAmkJku4Nv8_cRYuzpH0JHhV4Ani8oJaM3bmayMrhsiLexbKVlY-5kVKckIXlHhfubs5p/oauth-dance.jpg?psid=1&quot; alt=&quot;OAuth.JPG&quot; width=&quot;259&quot; height=&quot;194&quot; /&gt;
&lt;p&gt;* 출처: 다음 튜토리얼 자료&lt;/p&gt;

&lt;h3&gt;Yozm API 액세스하기&lt;/h3&gt;

&lt;p&gt;OAuth 인증을 거쳐 액세스 토큰(access token)을 획득했다면 이제 오픈 API에 접근할 수 있다. 예를 들어, 인증을 &quot;수락&quot;한 본인의 요즘(yozm) 개인 정보를 얻어오려면 다음 URL로 REST 호출하면 된다.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://apis.daum.net/yozm/v1_0/user/show.xml&quot;&gt;http://apis.daum.net/yozm/v1_0/user/show.xml&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;참고자료:&lt;/h3&gt;
&lt;ul&gt;
	&lt;li&gt;OAuth 소개 &lt;a href=&quot;http://oauth.net/documentation/getting-started/&quot;&gt;http://oauth.net/documentation/getting-started/&lt;/a&gt;&lt;/li&gt;
	&lt;li&gt;다음 OAuth 서비스 &lt;a href=&quot;https://apis.daum.net/oauth/main/welcome&quot;&gt;https://apis.daum.net/oauth/main/welcome&lt;/a&gt;&lt;/li&gt;
	&lt;li&gt;yozm 사용자 정보보기 &lt;a href=&quot;http://dna.daum.net/apis/yozm/ShowUser&quot;&gt;http://dna.daum.net/apis/yozm/ShowUser&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
 </entry>
 
 <entry>
   <title>워드프레스 테마 커스터마이징:  두 가지 방법</title>
   <link href="http://usefulparadigm.com/2011/03/08/customizing-wordpress-theme"/>
   <updated>2011-03-08T00:00:00+09:00</updated>
   <id>http://usefulparadigm.com/2011/03/08/customizing-wordpress-theme</id>
   <content type="html">&lt;img class=&quot;right&quot; title=&quot;download.blog&quot; src=&quot;/img/uploads/2011/03/download.blog_-300x267.png&quot; alt=&quot;&quot; width=&quot;180&quot; height=&quot;160&quot; /&gt;

&lt;p&gt;&lt;a href=&quot;http://wordpress.org/&quot;&gt;WordPress&lt;/a&gt;는 이미 블로깅(blogging) 도구라는 이미지에서 벗어나 멋진 CMS 플랫폼으로 자리매김한지 오래다. 그리고 이렇게 WordPress가 멋진 플랫폼으로 발전하게 된 데는 뭐니뭐니해도 유연한 확장성을 갖춘 테마(theme) 시스템이 큰 견인차 역할을 해 왔다. WordPress에서 테마를 변경하는데는 크게 두 가지 방법이 있다.&lt;/p&gt;

&lt;h3&gt;첫 번째 방법: 테마 템플릿 수정하기&lt;/h3&gt;

&lt;p&gt;첫 번째 방법은 테마 템플릿 파일 자체를 수정하는 것이다. 여기에는 기존의 다른 테마를 가져다가 수정하거나 아니면 아예 처음부터 새로 테마 시스템을 개발하는 것을 포함한다. WordPress의 테마 작성법에 대해서는 너무 많은 사용법과 문서들이 나와 있기 때문에 여기서는 따로 다루지 않기로 한다.&lt;/p&gt;

&lt;h3&gt;두 번째 방법: 테마 상속하기&lt;/h3&gt;

&lt;p&gt;워드프레스 2.7 버전부터 새로 도입된 이 방식은 말 그대로 어떤 테마를 상속하는 방법이다. 예를 들어, A라는 테마가 있다고 하면 이 테마를 그대로 사용하고 그 중 커스터마이징이 필요한 부분만 부분 수정하는 방식으로 테마를 변경하는 것이다. 이럴 경우 두 개의 테마 간에는 일종의 부모-자식 관계가 성립하며, 따라서 원래의 테마를 부모 테마(mother theme)라 부르고, 부모 테마로부터 상속받은 테마를 자식 테마(chile theme)라고 부른다.&lt;/p&gt;

&lt;p&gt;자식 테마를 만드는 방법은 간단하다. 새로운 테마 디렉터리를 하나 생성한 다음 sytle.css 파일의 주석에 Theme 값으로 부모 테마 디렉터리의 이름을 지정해 주면 끝이다. 예를 들면 다음과 같다.&lt;/p&gt;
&lt;pre&gt;/*
Theme Name:     Twenty Ten Child
Theme URI:      http: //example.com/
Description:    Child theme for the Twenty Ten theme
Author:         Your name here
Author URI:     http: //example.com/about/
Template:       twentyten
Version:        0.1.0
*/
&lt;/pre&gt;

&lt;p&gt;이제 이 테마는 고맙게도 부모 테마(여기서는 twentyten)의 모든 것을 물러 받는다. 그 다음 부터는 맘에 들지 않는 부분만 고치면 그만이다. 예를 들면, CSS 스타일의 일정 부분만 고칠 수도 있고, 부모 템플릿 파일 중 필요한 부분만 변경할 수도 있다.&lt;/p&gt;

&lt;p&gt;둘 중 어느 방법을 사용하느냐는 물론 상황에 따라 다르다. 경우에 따라서는 아예 새로 테마를 작성하는 첫 번째 방식이 더 효과적일 때도 있다. 그렇지만, 메인 테마를 그대로 두고 필요한 부분만 개선하는 두 번째 방법은, 메인 테마를 계속 유지하면서 자식 테마만 조금씩 변경하면서 운영할 때 아주 효과적인 방법이다.&lt;/p&gt;

&lt;h3&gt;참고자료:&lt;/h3&gt;
&lt;ul&gt;
	&lt;li&gt;&lt;a href=&quot;http://codex.wordpress.org/Child_Themes&quot;&gt;http://codex.wordpress.org/Child_Themes&lt;/a&gt;&lt;/li&gt;
	&lt;li&gt;메인 테마로 사용하기 좋은 Theme Framework
&lt;ul&gt;
	&lt;li&gt;&lt;a href=&quot;http://themeshaper.com/thematic/&quot;&gt;Thematic, A WordPress Theme Framework&lt;/a&gt;&lt;/li&gt;
	&lt;li&gt;&lt;a href=&quot;http://notesblog.com/&quot;&gt;Notes Blog Core Theme&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
</content>
 </entry>
 
 <entry>
   <title>톡팟tokpot 서비스 베타 오픈</title>
   <link href="http://usefulparadigm.com/2010/11/09/tokpot-beta-open-notice"/>
   <updated>2010-11-09T00:00:00+09:00</updated>
   <id>http://usefulparadigm.com/2010/11/09/tokpot-beta-open-notice</id>
   <content type="html">&lt;p&gt;유스풀패러다임의 새 웹서비스인 톡팟tokpot 을 오픈하였습니다.&lt;/p&gt;

&lt;p&gt;톡팟tokpot은 트위터twitter 기반 게시판 위젯widget 서비스입니다. 톡팟을 이용하면 여러분 사이트나 블로그에 간단하게 트위터 기반 게시판을 붙여 넣을 수 있습니다.&lt;/p&gt;

&lt;a href=&quot;http://tokpot.com&quot;&gt;&lt;img class=&quot;aligncenter size-full wp-image-60&quot; title=&quot;tokpot&quot; src=&quot;/img/uploads/2010/11/tokpot.jpg&quot; alt=&quot;&quot; width=&quot;500&quot; height=&quot;491&quot; /&gt;&lt;/a&gt;

&lt;p&gt;톡팟은 특히 이런 분들께 유용합니다.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;나만의 브랜드를 가진 홈페이지나 블로그를 운영하면서 방문객들이 트위터로 이동하지 않고 내 사이트 내에서 소통을 이어가고자 할 때.&lt;/li&gt;
&lt;li&gt;사업체 또는 공공단체, 학교 등 홈페이지 속에서 트위터로 대화를 주고 받고자 할 때.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;아직 베타 버전이라 부족한 부분이 있지만, 사용자들의 피드백을 받아 꾸준히 업데이트해 나갈 계획입니다.&lt;/p&gt;

&lt;p&gt;많은 관심과 격려 부탁 드립니다.&lt;/p&gt;</content>
 </entry>
 
 <entry>
   <title>레일스3 환경에서 레일스2 애플리케이션 생성하기</title>
   <link href="http://usefulparadigm.com/2010/09/25/generate-rails2-app-in-rails3"/>
   <updated>2010-09-25T00:00:00+09:00</updated>
   <id>http://usefulparadigm.com/2010/09/25/generate-rails2-app-in-rails3</id>
   <content type="html">&lt;img class=&quot;right&quot; title=&quot;from-rails2&quot; src=&quot;/img/uploads/2010/09/download3-0.png&quot; alt=&quot;&quot; width=&quot;144&quot; height=&quot;153&quot; /&gt;

&lt;p&gt;최근 레일스가 버전 3으로 업그레이드되면서 프레임워크 안팎으로 &lt;a href=&quot;http://edgeguides.rubyonrails.org/3_0_release_notes.html&quot;&gt;기존의 버전 업그레이드와는 차원이 다른 많은 변화&lt;/a&gt;가 생겼다. 레일스가 Merb와 합병한다는 소식을 공개한 것이 지난 2008년 말. 그 후로 약 2년간 거의 4,000회의 커밋과 250여 명의 커미터가 함께 한 ‘리팩터링 대장정’. 그래서인지 &lt;a href=&quot;http://accidentaltechnologist.com/ruby-on-rails/to-rails-3-or-not-to-rails-3-that-is-the-question/&quot;&gt;혹자&lt;/a&gt;는 이를 두고 마치 예전 마이크로소프트가 ASP에서 ASP.NET으로 갈아 탔을 때의 느낌을 연상하기도 하지만, 결과야 좀 더 두고 볼 일.&lt;/p&gt;

&lt;p&gt;업그레이드에 따른 가장 큰 이슈는 물론 기존의 레일스 애플리케이션을 새 버전으로 업그레이드시키는  것이겠지만, 경우에 따라서는 이미 레일스3을 설치하고서 갑자기 이전 버전의 레일스 애플리케이션을 생성해야 할 경우도 생긴다.  문제는 레일스3에서는 애플리케이션 생성 명령이 변경되어 기존의 rails 명령이 그대로 작동하지 않는 것.&lt;/p&gt;

&lt;p&gt;두 가지 방법이 있다.&lt;/p&gt;

&lt;h3 id=&quot;_1__rvm__&quot;&gt;방법 1 - RVM을 이용하는 방법&lt;/h3&gt;
&lt;p&gt;&lt;a href=&quot;http://rvm.beginrescueend.com/&quot;&gt;RVM&lt;/a&gt;을 사용 중이라면 간단하게 루비 VM을 전환하여 레일스 환경을 변경할 수 있다.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# 루비 1.9.2에서 레일스 3 사용하기
$ rvm install 1.9.2
$ rvm 1.9.2
$ rails new app-name

# 다시 이전 버전(레일스 2)으로 돌리기
$ rvm system
$ rails app-name&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&quot;_2__bundler__&quot;&gt;방법 2 - Bundler를 이용하는 방법&lt;/h3&gt;
&lt;p&gt;&lt;a href=&quot;http://gembundler.com/&quot;&gt;Bundler&lt;/a&gt;를 이용하면 굳이 RVM을 사용하지 않고도 간단하게 이전 버전의 레일스 애플리케이션을 생성할 수 있다.&lt;/p&gt;

&lt;p&gt;1) 새 프로젝트 디렉터리를 만든다.&lt;/p&gt;

&lt;p&gt;2) Gemfile을 만들고 다음과 같이 생성할 레일스 버전을 준다.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;gem &quot;rails&quot;, &quot;2.3.8&quot;
gem &quot;sqlite3-ruby&quot;, :require =&amp;gt; &quot;sqlite3&quot;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;3)  다음 bundle 명령을 차례로 수행.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ bundle install
$ bundle exec rails .&lt;/code&gt;&lt;/pre&gt;</content>
 </entry>
 
 <entry>
   <title>페이스북 앱 개발 가이드</title>
   <link href="http://usefulparadigm.com/2010/07/20/facebook-app-tutorial"/>
   <updated>2010-07-20T00:00:00+09:00</updated>
   <id>http://usefulparadigm.com/2010/07/20/facebook-app-tutorial</id>
   <content type="html">&lt;p&gt;&lt;img class=&quot;right&quot; title=&quot;logo-f8-150x123&quot; src=&quot;/img/uploads/2010/07/logo-f8-150x123.gif&quot; alt=&quot;&quot; width=&quot;150&quot; height=&quot;123&quot; /&gt;&lt;/a&gt;Facebook과 연동한 웹 개발 방식은 크게 두 종류로 나눌 수 있다. 하나는 기존의 웹 사이트와 페이스북을 연동하는  Facebook Connect 방식의 웹 개발이고, 다른 하나는 페이스북 페이지 내에 사이트를 내장시키는 Facebook  Canvas App 방식이다. Facebook Canvas App은 다시 내장 방식으로 IFrame을 사용하냐 혹은 페이스북에서  제공하는 FBML을 사용하냐에 따라 IFrame Canvas와 FBML Canvas로 나눌 수도 있다.&lt;/p&gt;

&lt;p&gt;Facebook은 잘 정리된 개발문서와 개발자 지원 페이지를 제공하고 있고, 또한 위에서 소개한 각각의  개발 방식에 맞춰 여러 종류의 개발 언어로 작성된 SDK를 제공하기 때문에 어떤 개발환경을 사용하든 손쉽게 페이북과 연동되는 웹  애플리케이션/서비스를 개발할 수 있다.&lt;/p&gt;

&lt;ul&gt;
	&lt;li&gt;&lt;a href=&quot;http://developers.facebook.com/&quot;&gt;Facebook 개발자 페이지&lt;/a&gt;&lt;/li&gt;
	&lt;li&gt;&lt;a href=&quot;http://developers.facebook.com/docs/&quot;&gt;Facebook 개발 문서&lt;/a&gt;&lt;/li&gt;
	&lt;li&gt;Facebook SDKs: &lt;a href=&quot;http://developers.facebook.com/docs/reference/javascript/&quot;&gt;JavaScript&lt;/a&gt;, &lt;a href=&quot;http://github.com/facebook/php-sdk/&quot;&gt;PHP&lt;/a&gt;, &lt;a href=&quot;http://github.com/facebook/python-sdk/&quot;&gt;Python&lt;/a&gt;, &lt;a href=&quot;http://github.com/facebook/facebook-iphone-sdk/&quot;&gt;iPhone&lt;/a&gt;, &lt;a href=&quot;http://github.com/facebook/facebook-android-sdk&quot;&gt;Android&lt;/a&gt;, &lt;a href=&quot;http://github.com/facebook/csharp-sdk&quot;&gt;C#&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;open_graph_api_oauth&quot;&gt;Open Graph API와 OAuth&lt;/h3&gt;
&lt;p&gt;최근 페이스북은 기존의 &lt;a href=&quot;http://developers.facebook.com/docs/reference/rest/&quot;&gt;REST 방식의 API&lt;/a&gt;를 버리고 &lt;a href=&quot;http://opengraphprotocol.org/&quot;&gt;Open Graph&lt;/a&gt;라는 오픈 프로토콜에 기반한 API로 서비스 접근 방식을 변경하였다. 또한 서비스 인증(authentication &amp;amp; authorization)도 오픈 표준인 &lt;a href=&quot;http://wiki.oauth.net/OAuth-2&quot;&gt;OAuth2&lt;/a&gt;를 채용함으로써 이전보다 훨씬 표준적인 개발 방식으로 접근할 수 있는 길을 열어 놓고 있다.&lt;/p&gt;

&lt;p&gt;특히 Facebook JavaScript SDK와 FBML의 클라이언트 확장인 XFBML을 이용하게  되면 기존의 Facebook Connect 이나 IFrame Canvas 방식의 Facebook App의 성능도 향상시킬 수 있게  되었다.&lt;/p&gt;

&lt;h3 id=&quot;facebook_app__&quot;&gt;Facebook App 개발 절차&lt;/h3&gt;
&lt;p&gt;Facebook App의 개발 절차를 간략히 정리하면 아래 단계와 같다. 자세한 내용은 페이스북 개발문서를 참조.&lt;/p&gt;
&lt;ol&gt;
	&lt;li&gt;Facebook 개발자 페이지에서 &lt;a href=&quot;http://www.facebook.com/developers/createapp.php&quot;&gt;새 App을 추가&lt;/a&gt;한다.&lt;/li&gt;
	&lt;li&gt;Facebook JavaScript SDK를 페이지에 추가한다.&lt;/li&gt;
	&lt;li&gt;OAuth access_token으로 Graph API를 액세스한다.&lt;/li&gt;
	&lt;li&gt;FBML/XFBML, FQL을 적절히 이용한다.&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;_facebook_app&quot;&gt;루비/레일스와 Facebook App&lt;/h3&gt;
&lt;p&gt;아쉽게도 아직 페이스북에서 루비/레일스 개발자들을 위한 공식 SDK는 제공하지 않는다. 그렇지만 이미 루비 커뮤니티에서는 페이스북 개발을 지원하는 많은 라이브러리와 도구들이 나와 있다. 대표적인 것은 다음과 같다.&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;&lt;a href=&quot;http://github.com/mmangino/facebooker&quot;&gt;Facebooker&lt;/a&gt;: Rails 플러그인. 가장 오래되고 사용자 기반이 넓지만 Old REST 방식이며 다소 무겁다는 단점이 있다.&lt;/li&gt;
	&lt;li&gt;&lt;a href=&quot;http://github.com/mmangino/facebooker2&quot;&gt;Facebooker2&lt;/a&gt;: 기존 Facebooker를 새 API에 맞게 리모델링한 것으로, Graph API 라이브러리인 &lt;a href=&quot;http://github.com/mmangino/mogli&quot;&gt;mogli&lt;/a&gt;를 기반으로 한다.&lt;/li&gt;
	&lt;li&gt;&lt;a href=&quot;http://github.com/tmm1/sinbook&quot;&gt;sinbook&lt;/a&gt;: Sinatra 확장 라이브러리. 300줄 정도의 적은 코드로 되어 있으며, Old REST API 방식.&lt;/li&gt;
	&lt;li&gt;&lt;a href=&quot;http://github.com/arsduo/koala&quot;&gt;Koala&lt;/a&gt;: 새 API 기반이며 Connect과 App 개발 모드 모두를 지원한다. 주목할만한 신예 라이브러리.&lt;/li&gt;
&lt;/ul&gt;</content>
 </entry>
 
 
</feed>